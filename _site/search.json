[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_ex02",
    "section": "",
    "text": "This exercise aims to critique and improved on the visualizations created by peers from Take Home Exercise 1 based on clarity and aesthetics. For each visualization, I will be listing what had worked well, what did not, and what I think would help make it better. Finally, the visualization will be re-made based on my suggestions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-r-packages",
    "title": "Take-home_ex02",
    "section": "2.1 Loading R packages",
    "text": "2.1 Loading R packages\nWe begin by loading the required R packages.\n\n\nShow the code\npacman::p_load(tidyverse,\n               haven,\n               dplyr,\n               plotly,\n               ggrepel, \n               patchwork, \n               ggthemes, \n               hrbrthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-pisa-data-set",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-pisa-data-set",
    "title": "Take-home_ex02",
    "section": "2.2 Importing PISA data set",
    "text": "2.2 Importing PISA data set\nSimilar to exercise 1, the data we are using can be found from the PISA 2022 Database. The database contains full set of responses from individual students, principals, and parents. In this task, we will only be looking at the students questionnaire data file. In particular, we are only interested in the data of students from Singapore.\n\n\nShow the code\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "title": "Take-home_ex02",
    "section": "2.3 Data wrangling",
    "text": "2.3 Data wrangling\nWe will be using a curated set of variables for our analysis. The variables and their descriptions are listed in the table below.\n\n\n\n\n\n\n\n\nVariable\nDescription\nData Type\n\n\n\n\nCNTSCHID\nThe unique School’s ID\nCategorical\n\n\nCNTSTUID\nThe unique student’s ID\nCategorical\n\n\nMath_Score\nAverage PV scores for Math\nNumerical\n\n\nReading_Score\nAverage PV scores for Reading\nNumerical\n\n\nScience_Score\nAverage PV scores for Science\nNumerical\n\n\nTotal_Score\nOverall average score from the sum of Math, Reading, and Science\nNumerical\n\n\nGender\nMale or Female\nNumerical\n\n\nOwn_Room\nWhether student has his or her own room\nCategorical\n\n\nmi-num\nNumber of musical instruments at student’s home\nNumerical\n\n\n\nThe following code extracts and integrates them in a new data frame.\n\n\nShow the code\n# Create a new dataset PV by extracting relevant variables from stu_qqq_SG\nPV &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    Math_Score = rowMeans(select(., contains(\"PV\")&contains(\"MATH\")), na.rm = TRUE),\n    Reading_Score = rowMeans(select(., contains(\"PV\")&contains(\"READ\")), na.rm = TRUE),\n    Science_Score = rowMeans(select(., contains(\"PV\")&contains(\"SCIE\")), na.rm = TRUE),\n    Total_Score = Math_Score + Reading_Score + Science_Score,\n    Average_Score = Total_Score / 3,\n    Gender = ifelse(ST004D01T == 1,  \"Female\", \"Male\"),\n    Own_Room = ifelse(ST250Q01JA == 1, \"Yes\" , \"No\"),\n    mi_num = ST251Q06JA\n  ) %&gt;%\n  select(CNTSCHID, CNTSTUID, Math_Score, Reading_Score, Science_Score, Total_Score, Average_Score, Gender, Own_Room, mi_num)\n\n\nAnother data set is created for schools. The following code calculates the maths, reading, and science, as well as the average grades in these three subjects for each school’s students.\n\n\nShow the code\nSchool_Avg_Scores &lt;- PV %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math_Score = mean(Math_Score, na.rm = TRUE),\n    Avg_Reading_Score = mean(Reading_Score, na.rm = TRUE),\n    Avg_Science_Score = mean(Science_Score, na.rm = TRUE),\n    Avg_Score = mean(Total_Score/3, na.rm = TRUE)\n  )\n\nSchool_Avg_Scores_long &lt;- School_Avg_Scores %&gt;%\n  select(CNTSCHID, \n         starts_with(\"Avg_Math\"), \n         starts_with(\"Avg_Reading\"), \n         starts_with(\"Avg_Science\"),\n         starts_with(\"Avg_Score\")) %&gt;%\n  pivot_longer(cols = -CNTSCHID, \n               names_to = \"Subject\", \n               values_to = \"Score\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-student-performance",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-student-performance",
    "title": "Take-home_ex02",
    "section": "3.1 Distribution of Student Performance",
    "text": "3.1 Distribution of Student Performance\nThe following code plots histograms of maths, reading, science, and total score scores to observe the distribution of student performance:\n\n\nShow the code\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Reading scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Science scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Total scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot1 + plot2 + plot3 + plot4\n\n\n\n\n\n\n3.1.1 Pros and Cons\nClarity\n\nHistograms are not able to show the distribution of continuous variables well. Instead, a boxplot or density plot would be more suitable.\nAxes limits are not aligned and can be misleading, especially for the charts showing Math, Reading, and Science scores.\nThe plot layout of 2x2 is not ideal. I would use a layout where easy comparison can be made for Math, Reading, and Science.\nOn the same point, I would opt not to show Total Scores as it is on a different scale as compared to the other 3 plots. Rather, I would use Average Scores to give a summary of all 3 scores together.\n\nAesthetics\n\nSoft grid lines are not distracting\nthe “_” in the y-axis label appears unprofessional\nThe colour choice is neat and simple. It is however, too striking for a fill colour. A lighter shade would be more pleasant to the eyes while using striking colours to highlight points of attention.\nThe repetition of “Distribution” in each chart’s title is unnecessary, and can be mentioned once in the plot title instead\n\n\n\n3.1.2 Sketch\n\n\n\n\n\nClarity\n\nChanged the layout with a boxplot that shows Average Scores at the top that gives a summary of all 3 subjects, and a density plot to show the breakdown of these subjects together for easier comparison\nx-axis limits are aligned for both top and bottom charts\nLines have been added to visualize the means of all 3 subjects. Their corresponding points have also been plotted on the boxplot\nAnnotations are added to highlight the mean numbers\n\nAesthetics\n\nSoft grid lines are removed to prevent confusion with the boxplot\nPlot title and axis labels have been replaced to give a clearer picture of what the variables are\nTransparency is added to the fill colour to tone down the glare. Its non-transparent colours are used for the lines, points, and annotation to highlight the points of focus\nbold axis titles for inking effect\n\n\n\n3.1.3 Make-over\n\n\nShow the code\ntemp &lt;- PV[, c(\"CNTSTUID\", \"Math_Score\", \"Reading_Score\", \"Science_Score\")] %&gt;% gather(key = \"Subject\", value = \"Scores\", Math_Score, Reading_Score, Science_Score)\n\np11 &lt;- ggplot(data = temp, aes(x = Scores, fill = Subject)) +\n  geom_density(alpha = 0.3) +\n  xlab(\"Math, Reading, and Science Scores\") +\n  ylab(\"Student\\nDensity\") +\n  xlim(200, 900) + \n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.x = element_text(face = \"bold\"),\n        axis.title.y = element_text(face = \"bold\")) + \n  geom_vline(xintercept = mean(PV$Math_Score),\n             colour = \"red\",\n             linetype = \"dashed\") +\n  geom_vline(xintercept = mean(PV$Reading_Score),\n             colour = \"lawngreen\",\n             linetype = \"dashed\") +\n  geom_vline(xintercept = mean(PV$Science_Score),\n             colour = \"blue\",\n             linetype = \"dashed\") +\n  annotate(\n    geom = \"text\", \n    x = 800, \n    y = 0.004,\n    label = paste0(\"Math Mean: \", round(mean(PV$Math_Score),2)),\n    color = \"red\",\n    fontface = 2,\n    size = 3\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 800, \n    y = 0.003,\n    label = paste0(\"Reading Mean: \", round(mean(PV$Reading_Score),2)),\n    color = \"lawngreen\",\n    fontface = 2,\n    size = 3\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 800, \n    y = 0.0035,\n    label = paste0(\"Science Mean: \", round(mean(PV$Science_Score),2)),\n    color = \"blue\",\n    fontface = 2,\n    size = 3\n  ) +\n  scale_y_continuous(labels = scales::percent)\n\np12 &lt;- ggplot(data = PV, aes(y = Average_Score)) +\n  geom_boxplot(fill = \"lightgray\") +\n  geom_point(aes(x = 0 ,y = mean(Math_Score)),\n             colour = \"red\",\n             size = 2) +\n  geom_point(aes(x = 0 ,y = mean(Reading_Score)),\n             colour = \"lawngreen\",\n             size = 2) +\n  geom_point(aes(x = 0 ,y = mean(Science_Score)),\n             colour = \"blue\",\n             size = 2) +\n  coord_flip() +\n  ylim(200, 900) + \n  xlab(\"Average\\nScores\") +\n  ylab(element_blank()) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        axis.text.y = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\"))\n\np1 &lt;- p12 / p11\n\np1 &lt;- p1 + \n  plot_layout(axes=\"collect\",\n              heights = c(1,5)) + \n  plot_annotation(\n    title = \"Distribution of Students' Scores\"\n  )\n\np1"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-gender",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-gender",
    "title": "Take-home_ex02",
    "section": "3.2 Student Performance by Gender",
    "text": "3.2 Student Performance by Gender\nThe following code generates density plots to compare the distribution of academic performance between students of different genders, providing a comprehensive understanding of the gender differences in academic achievement.\n\n\nShow the code\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\") +  \n   scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Math Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal() +\n  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Reading Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Science Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Total Scores by Gender\") + \n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\ncombined_plots &lt;- plot1 + plot2 + plot3 + plot4 +\n  plot_layout(guides = \"collect\")\n\ncombined_plots\n\n\n\n\n\n\n3.2.1 Pros and Cons\nClarity\n\nAxes limits are not aligned and can be misleading, especially for the charts showing Math, Reading, and Science scores.\nThe plot layout of 2x2 is not ideal. I would use a layout where easy comparison can be made for Math, Reading, and Science.\nSimilarly, I would opt not to show Total Scores as it is on a different scale as compared to the other 3 plots. Rather, I would use Average Scores to give a summary of all 3 scores together.\n\nAesthetics\n\nSoft grid lines are not distracting\nthe “_” in the y-axis label appears unprofessional\nThe colour choice is simple and shows the contrast between the 2 genders clearly\nThe repetition of “Scores by Gender” in each chart’s title is unnecessary, and can be mentioned once in the plot title instead\n\n\n\n3.2.2 Sketch\n\n\n\n\n\nClarity\n\nChanged the layout with a density that shows Average Scores by gender at the top that gives a summary of all 3 subjects, and 3 box plots to show the breakdown of these subjects by gender for easier comparison\nx and y-axis limits are aligned for both top and bottom charts\n\nAesthetics\n\nSoft grid lines are removed to prevent confusion with the boxplot\nPlot title and axis labels have been replaced to give a clearer picture of what the variables are\nTransparency is added to the fill colour to tone down the glare\nBold axis labels and titles\n\n\n\n3.2.3 Make-over\n\n\nShow the code\np21 &lt;- ggplot(data = PV, aes(x = Gender, y = Math_Score, fill = Gender)) +\n  geom_boxplot(alpha = 0.3, show.legend = FALSE) +\n  xlab(\"Math\") +\n  ylab(\"Scores\") +\n  ylim(200, 800) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.x = element_text(face = \"bold\", size = 8),\n        axis.title.y = element_text(face = \"bold\")) +\n  scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"blue\"))\n\np22 &lt;- ggplot(data = PV, aes(x = Gender, y = Reading_Score, fill = Gender)) +\n  geom_boxplot(alpha = 0.3, show.legend = FALSE) +\n  xlab(\"Reading\") +\n  ylab(\"Scores\") +\n  ylim(200, 800) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.x = element_text(face = \"bold\", size = 8),\n        axis.title.y = element_text(face = \"bold\")) +\n  scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"blue\"))\n\np23 &lt;- ggplot(data = PV, aes(x = Gender, y = Science_Score, fill = Gender)) +\n  geom_boxplot(alpha = 0.3, show.legend = FALSE) +\n  xlab(\"Science\") +\n  ylab(\"Scores\") +\n  ylim(200, 800) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.x = element_text(face = \"bold\", size = 8),\n        axis.title.y = element_text(face = \"bold\")) +\n  scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"blue\"))\n\np24 &lt;- ggplot(data = PV, aes(x = Average_Score, fill = Gender)) +\n  geom_density(alpha = 0.3) +\n  labs(title = \"Average Scores\") +\n  xlab(element_blank()) +\n  xlim(200,800) +\n  ylab(\"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"blue\")) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"right\",\n        axis.title.y = element_text(face = \"bold\"))\n\np2 &lt;- p24 / (p21 + p22 + p23 + plot_layout(axes = \"collect\"))\n\np2 &lt;- p2 + plot_layout(guides = \"collect\",\n                       heights = c(1,3)) + \n  plot_annotation(\n    title = \"Distribution of Students' Scores by Gender\"\n  )\n\np2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-school",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-school",
    "title": "Take-home_ex02",
    "section": "3.3 Student Performance by School",
    "text": "3.3 Student Performance by School\nThe following code draws box plots showing the distribution of school average scores in each subject, with text labels identifying the four highest-scoring schools and the two lowest-scoring schools in each subject.\n\n\nShow the code\noutliers_data &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_\"), names_to = \"Subject\", values_to = \"Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Score) %&gt;%\n  slice(c(1:2, (n() - 3):(n())))\n\nggplot(School_Avg_Scores_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_boxplot(fill = \"#3459e6\") +\n  geom_text_repel(data = outliers_data, aes(label = CNTSCHID), \n                  position = position_dodge(width = 1), \n                  box.padding = 0.8, \n                  force = 1, \n                  segment.color = \"grey50\", \n                  size = 2) +  # Use ggrepel's geom_text_repel\n  labs(title = \"Boxplot of Average Scores for Each Subject\", x = \"\", y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n3.3.1 Pros and Cons\nClarity\n\nLack of y-axis label\nannotations are cluttered and difficult to read. It seems like the intention was to highlight the best and worst performing schools for Avg_Score, as well as their position on Math, Reading, and Science respectively. In this case, I would only single out one school for best and one school for worst, and use a different colour to highlight their position on each boxplot.\n\nAesthetics\n\nSoft grid lines are not distracting\nthe “_” in the y-axis label appears unprofessional\nThe colour choice is neat and simple\n\n\n\n3.3.2 Sketch\n\n\n\n\n\nClarity\n\nAdded y-axis label “Average Scores”\nRemove annotations for all but the Top and Bottom School. I also only included the school ID only on the boxplot for “Average of three subjects”, while highlighting their respective position for each of the different subjects using coloured points. Added a legend for the coloured points as well.\n\nAesthetics\n\nRemoved the grid lines as there are already axis ticks.\nTidied up the x-axis text. Removed the “_” and “Avg_Score” as these are now shown in the y-axis title.\nReplaced the fill with lightgray. This helps to provide contrast with the coloured points of the Top and Bottom Schools.\nBold axis labels and titles\n\n\n\n3.3.3 Make-over\n\n\nShow the code\ntop&lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_Score\"), \n               names_to = \"Subject\", \n               values_to = \"Avg_Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Avg_Score) %&gt;%\n  slice(c((n()):(n()))) %&gt;% \n  gather(key = \"Subject\", \n         value = \"Score\", \n         Avg_Math_Score, \n         Avg_Reading_Score, \n         Avg_Science_Score, \n         Avg_Score)\n\nbottom &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_Score\"), \n               names_to = \"Subject\", \n               values_to = \"Avg_Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Avg_Score) %&gt;%\n  slice(c(1:1)) %&gt;% \n  gather(key = \"Subject\", \n         value = \"Score\", \n         Avg_Math_Score,\n         Avg_Reading_Score, \n         Avg_Science_Score, \n         Avg_Score)\n\nggplot(School_Avg_Scores_long,\n       aes(x = Subject,\n           y = Score, \n           fill = Subject)) +\n  geom_boxplot(fill = \"lightgray\") +\n  geom_point(data = top, \n             aes(x = Subject, \n                 y = Score, \n                 color = \"Top School\")) +\n  geom_text_repel(data = top[grepl('Avg_Score', top$Subject),],\n                  aes(label = CNTSCHID), \n                  box.padding = 0.8,\n                  nudge_x = 0.7,\n                  nudge_y = 40,\n                  force = 1, \n                  color = \"blue\",\n                  size = 3) +\n  geom_point(data = bottom, \n             aes(x = Subject, \n                 y = Score, \n                 color = \"Bottom School\")) +\n  geom_text_repel(data = bottom[grepl('Avg_Score', bottom$Subject),],\n                  aes(label = CNTSCHID), \n                  box.padding = 0.8,\n                  nudge_x = 0.7,\n                  nudge_y = -40,\n                  force = 1, \n                  color = \"red\",\n                  size = 3) +\n  labs(title = \"Boxplot of Average Scores for Each Subject\", \n       x = \"\", \n       y = \"Average Scores\") +\n  scale_x_discrete(labels=c(\"Avg_Math_Score\" = \"Math\",\n                            \"Avg_Reading_Score\" = \"Reading\",\n                            \"Avg_Science_Score\" = \"Science\",\n                            \"Avg_Score\" = \"Average of\\n three Subjects\")) +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5,\n                                  face = \"bold\"),\n        axis.title.y = element_text(face = \"bold\",\n                                    size = 8),\n        axis.text.x = element_text(face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.title = element_blank()) + \n  scale_colour_manual(values = c(\"Top School\" = \"blue\",\n                                 \"Bottom School\" = \"red\")) +\n  guides(color=guide_legend(\"colour\", reverse = TRUE), fill = \"none\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-musical-instrument",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-musical-instrument",
    "title": "Take-home_ex02",
    "section": "3.4 Student Performance by Musical Instrument",
    "text": "3.4 Student Performance by Musical Instrument\nThe following code shows scatter plots of students’ maths, reading, science and overall performance against the number of musical instruments owned, as well as showing the relationship by fitting a line through linear regression.\n\n\nShow the code\nplot_math &lt;- ggplot(data=PV, aes(x=mi_num, y=Math_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Math Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_reading &lt;- ggplot(data=PV, aes(x=mi_num, y=Reading_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Reading Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_science &lt;- ggplot(data=PV, aes(x=mi_num, y=Science_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Science Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_total &lt;- ggplot(data=PV, aes(x=mi_num, y=Total_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Total Score by Musical instruments\", x = \"\", y = \"\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot &lt;- plot_math + plot_reading + plot_science + plot_total\ncombined_plot\n\n\n\n\n\n\n3.4.1 Pros and Cons\nClarity\n\nLack of x and y axis labels\nAxis limits are not aligned, making it difficult to make comparisons\nChoice of scatter plot is not suitable for discrete vs continuous data. It does not clearly show the distribution of grades and number of students at each x-axis tick.\nThe geom_smooth line makes little sense due to the nature of how the scatter points look like. (we can’t really tell that the line is going through the mean and giving an upward trend)\n\nAesthetics\n\nSoft grid lines are not distracting\nThe colour choice is neat and simple\nThe repetition of “by Musical Instruments” in each chart’s title is unnecessary, and can be mentioned in the plot title instead\n\n\n\n3.4.2 Sketch\n\n\n\n\n\nClarity\n\nAdded x and y labels\nAligned all axis limits so that they are of the same scale\nChanged the layout and replaced the scatter plot with a geom_bin_2d that shows Average Scores on the left that gives a summary of all 3 subjects. The bin map also indicates the total number of students with 1, 2, 3 or 4 instruments unlike the previous scatter plot.\nBoxplots are used to show breakdown for individual subjects.\nThe geom_smooth line is removed as the trend can already be observed from the plots.\n\nAesthetics\n\nSoft grid lines are removed as it is not needed.\nThe colour choice is reduced to a simple gray and red scale to avoid distractions.\nAxis titles are collected to avoid repetitions.\nBold axis labels and titles.\n\n\n\n3.4.3 Make-over\n\n\nShow the code\np41 &lt;- ggplot(data=na.omit(PV), \n              aes(x = as.factor(mi_num), \n                  y = Math_Score)) +\n  geom_boxplot(fill = \"lightgray\") +\n  ylim(200,800) +\n  labs(title = element_blank(), \n       x = element_blank(),\n       y = \"Math\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\")\n        )\n\np42 &lt;- ggplot(data=na.omit(PV), \n              aes(x = as.factor(mi_num), \n                  y = Reading_Score)) +\n  geom_boxplot(fill = \"lightgray\") +\n  ylim(200,800) +\n  labs(title = element_blank(), \n       x = element_blank(),\n       y = \"Reading\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\")\n        )\n\np43 &lt;- ggplot(data=na.omit(PV), \n              aes(x = as.factor(mi_num), \n                  y = Science_Score)) +\n  geom_boxplot(fill = \"lightgray\") +\n  ylim(200,800) +\n  labs(title = element_blank(), \n       x = element_blank(),\n       y = \"Science\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\")\n        )\n\n\np44 &lt;- ggplot(data=na.omit(PV), \n              aes(x=as.factor(mi_num), \n                  y=Average_Score)) +\n  ylim(200,800) + \n  geom_bin_2d(bins = 12) +\n  scale_fill_continuous(low = \"seashell\", \n                        high = \"red\") +\n  labs(title = element_blank(), \n       x = element_blank(), \n       y = \"Average of three Subjects\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        legend.position = \"left\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\")\n        )\n\n\np4 &lt;- p44 + (p41 / p42 / p43 + plot_layout(axis_titles = \"collect\"))\n\np4 &lt;- p4 + \n  plot_layout(axis_titles = \"collect\",\n              widths = c(4,6)) + \n  plot_annotation(\n    title = \"Distribution of Students' Scores by Number of Musical Instruments\\nin household\",\n  )\n\np4 &lt;- p4 & theme(plot.margin = margin(5.5, 5.5, 0, 5.5))\n\nwrap_elements(panel = p4) +\n  labs(tag = \"Number of Musical Intruments\") +\n  theme(\n    plot.tag = element_text(size = rel(0.8), \n                            face = \"bold\"),\n    plot.tag.position = \"bottom\"\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-own-room",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-own-room",
    "title": "Take-home_ex02",
    "section": "3.5 Student Performance by Own Room",
    "text": "3.5 Student Performance by Own Room\nThe following code plots box-and-line graphs to compare student performance in maths, reading, science and overall scores by whether or not they had the room to themselves.\n\n\nShow the code\np1 &lt;- ggplot(data = PV, aes(x =Math_Score , y = Own_Room)) +\n        geom_boxplot(fill = \"#3459e6\") +\n        labs(title =\"Math Score by Private Space\",x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\np2 &lt;- ggplot(data = PV, aes(x =Reading_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n     \n        labs(title =\"Reading Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n  \np3 &lt;- ggplot(data = PV, aes(x = Science_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n       \n        labs(title =\"Science Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))  \n\np4 &lt;- ggplot(data = PV, aes(x = Total_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n       \n        labs(title =\"Total Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot&lt;- p1 + p2 + p3 + p4\ncombined_plot\n\n\n\n\n\n\n3.5.1 Pros and Cons\nClarity\n\nLack of axis labels\nAxes limits are not aligned and can be misleading, especially for the charts showing Math, Reading, and Science scores.\nThe plot layout of 2x2 is not ideal. I would use a layout where easy comparison can be made for Math, Reading, and Science.\nOn the same point, I would opt not to show Total Scores as it is on a different scale as compared to the other 3 plots. Rather, I would use Average Scores to give a summary of all 3 scores together.\nData for NA should not be shown as it does not add value to the analysis\n\nAesthetics\n\nSoft grid lines are not distracting\n“Score by Private Space” is repeated in all charts’ titles. Instead, it can be mentioned only once in the plot title\nThe colour is same for all responses. I would use separate colours for yes and no responses.\n\n\n\n3.5.2 Sketch\n\n\n\n\n\nClarity\n\nAdded x and y labels\nAligned all axis limits so that they are of the same scale\nChanged the layout and replaced the Total Score boxplot with a Density plot which shows Average Scores on the left that gives a summary of all 3 subjects.\nBoxplots are used to show breakdown for individual subjects.\nNA responses are removed as it does not add to the analysis\n\nAesthetics\n\nSoft grid lines are removed as it is not needed.\nFill colour by response is added\nAxis are collected to avoid repetitions.\nBold axis labels and titles.\n\n\n\n3.5.3 Make-over\n\n\nShow the code\np51 &lt;- ggplot(data = na.omit(PV), \n              aes(x = Own_Room, \n                  y = Math_Score,\n                  fill = Own_Room)) +\n  geom_boxplot(alpha = 0.3, \n               show.legend = FALSE) +\n  ylim(200, 800) +\n  labs(title =\"Math\",\n       x = \"\", \n       y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_fill_manual(values = c(\"Yes\" = \"blue\",\n                               \"No\" = \"red\"))\n\np52 &lt;- ggplot(data = na.omit(PV), \n              aes(x = Own_Room, \n                  y = Reading_Score,\n                  fill = Own_Room)) +\n  geom_boxplot(alpha = 0.3, \n               show.legend = FALSE) +\n  ylim(200, 800) +\n  labs(title =\"Reading\",\n       x = \"\", \n       y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_fill_manual(values = c(\"Yes\" = \"blue\",\n                               \"No\" = \"red\"))\n\np53 &lt;- ggplot(data = na.omit(PV), \n              aes(x = Own_Room, \n                  y = Science_Score,\n                  fill = Own_Room)) +\n  geom_boxplot(alpha = 0.3, \n               show.legend = FALSE) +\n  ylim(200, 800) +\n  labs(title =\"Science\",\n       x = \"\", \n       y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_fill_manual(values = c(\"Yes\" = \"blue\",\n                               \"No\" = \"red\"))\n\np54 &lt;- ggplot(data = na.omit(PV), \n              aes(y = Average_Score , \n                  fill = Own_Room)) + \n  geom_density(alpha = 0.3) +\n  ylim(200, 800) +\n  labs(title =\"Average of three\\nSubjects\", \n       x = \"\",\n       y = \"Score\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.position = \"left\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.y = element_text(face = \"bold\"),\n        axis.text.y = element_blank()) +\n  scale_x_reverse() +\n  scale_fill_manual(values = c(\"Yes\" = \"blue\",\n                               \"No\" = \"red\")) + \n  guides(fill = guide_legend(title=\"Own Room\"))\n\n\np5 &lt;- p54 + (p51 + p52 + p53 + plot_layout(axes = \"collect\"))\n\np5 + plot_layout(widths = c(1,5)) + \n  plot_annotation(title = \"Distribution of Students' Scores by Private Space\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.1-funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.1-funnelplotr-methods-the-basic-plot",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.4.1 FunnelPlotR methods: The basic plot",
    "text": "4d.4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.2-funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.2-funnelplotr-methods-makeover-1",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.4.2 FunnelPlotR methods: Makeover 1",
    "text": "4d.4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions). xrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.3-funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.3-funnelplotr-methods-makeover-2",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.4.3 FunnelPlotR methods: Makeover 2",
    "text": "4d.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.1-computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.1-computing-the-basic-derived-fields",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.5.1 Computing the basic derived fields",
    "text": "4d.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.2-calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.2-calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "4d.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.3-plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.3-plotting-a-static-funnel-plot",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.5.3 Plotting a static funnel plot",
    "text": "4d.5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.4-interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.4-interactive-funnel-plot-plotly-ggplot2",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "4d.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "4b. Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.1-installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.1-installing-and-launching-r-packages",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.1 Installing and launching R packages",
    "text": "4b.3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.2-importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.2-importing-data",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.2 Importing data",
    "text": "4b.3.2 Importing data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.3-one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.3-one-sample-test-gghistostats-method",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.3 One-sample test: gghistostats() method",
    "text": "4b.3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.4-unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.4-unpacking-the-bayes-factor",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.4 Unpacking the Bayes Factor",
    "text": "4b.3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.5-how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.5-how-to-interpret-bayes-factor",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.5 How to interpret Bayes Factor",
    "text": "4b.3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.6-two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.6-two-sample-mean-test-ggbetweenstats",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.6 Two-sample mean test: ggbetweenstats()",
    "text": "4b.3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.7-oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.7-oneway-anova-test-ggbetweenstats-method",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "4b.3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.8-significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.8-significant-test-of-correlation-ggscatterstats",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "4b.3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.9-significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.9-significant-test-of-association-depedence-ggbarstats-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "4b.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.1-installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.1-installing-and-loading-the-required-libraries",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.1 Installing and loading the required libraries",
    "text": "4b.5.1 Installing and loading the required libraries\n\npacman::p_load(readxl, performance, parameters, see)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.2-importing-excel-file-readxl-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.2-importing-excel-file-readxl-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.2 Importing Excel file: readxl methods",
    "text": "4b.5.2 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.3-multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.3-multiple-regression-model-using-lm",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.3 Multiple Regression Model using lm()",
    "text": "4b.5.3 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.4-model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.4-model-diagnostic-checking-for-multicolinearity",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.4 Model Diagnostic: checking for multicolinearity",
    "text": "4b.5.4 Model Diagnostic: checking for multicolinearity\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.5-model-diagnostic-checking-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.5-model-diagnostic-checking-normality-assumption",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.5 Model Diagnostic: checking normality assumption",
    "text": "4b.5.5 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.6-model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.6-model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.6 Model Diagnostic: Check model for homogeneity of variances",
    "text": "4b.5.6 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.7-model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.7-model-diagnostic-complete-check",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.7 Model Diagnostic: Complete check",
    "text": "4b.5.7 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.8-visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.8-visualising-regression-parameters-see-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.8 Visualising Regression Parameters: see methods",
    "text": "4b.5.8 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.9-visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.9-visualising-regression-parameters-ggcoefstats-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.9 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "4b.5.9 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Here, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nIn the above graph, hovering your mouse above an data point of interest will display the students ID.\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender\", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    # aes tooltip edit here\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:black;\nfont-style:bold; color:white;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css)) \n)                                        \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: lawngreen;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly. Now, it highlights the data points of interest while applying transparency to the others.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: gold;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: springgreen;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Here, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization---ggiraph-methods",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "In the above graph, hovering your mouse above an data point of interest will display the students ID.\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender\", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    # aes tooltip edit here\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:black;\nfont-style:bold; color:white;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css)) \n)                                        \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: lawngreen;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly. Now, it highlights the data points of interest while applying transparency to the others.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: gold;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: springgreen;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "title": "Hands-on_Ex03",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n4.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n4.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "title": "Hands-on_Ex03",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on_Ex03",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "title": "Hands-on_Ex03",
    "section": "4.4 Animated Data Visualisation: plotly",
    "text": "4.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this chapter, we will be trying out several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nWe use p_load() function from the pacman library to load the required packages\n\npacman::p_load(ggrepel, \n               patchwork, \n               ggthemes, \n               hrbrthemes,\n               tidyverse) \n\n\n\n\nWe will be using a data file called Exam_data. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nGgrepel is able to hide the overlaps pretty well to prevent clutter\n\n\nShow the code\ng231 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS,\n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"With ggrepel\")\n\ng232 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Without ggrepel\")\n\np23 &lt;- g231 + g232\n\np23 + plot_annotation(title = \"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nTrying out various themes from base\n\n\nShow the code\ng241 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"theme_gray\") \n\ng242 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"theme_void\") \n\ng243 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"theme_classic\") \n\ng244 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"theme_minimal\") \n\np241 &lt;- (g241 + g242) / (g243 + g244)\n\np241 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\nTrying out themes from ggthemes\n\n\nShow the code\ng245 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_economist\") +\n  theme_economist()\n\ng246 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_fivethirtyeight\") +\n  theme_fivethirtyeight()\n\ng247 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_hc\") +\n  theme_hc()\n\ng248 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_stata\") +\n  theme_stata()\n\np242 &lt;- (g245 + g246) / (g247 + g248)\n\np242 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\n\nTrying out themes from the hrbthems package\n\n\nShow the code\ng249 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_ft_rc\") +\n  theme_ft_rc()\n\ng2410 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_ipsum\") +\n  theme_ipsum()\n\ng2411 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_modern_rc\") +\n  theme_modern_rc()\n\ng2412 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_tinyhand\") +\n  theme_tinyhand()\n\np243 &lt;- (g249 + g2410) / (g2411 + g2412)\n\np243 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\n\n\nUsing patchwork to combine multiple charts together to tell a complete story\nFirst, let’s create 3 different graphs\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\nNow, lets try to patch them together in various arrangements\n\n\nShow the code\n(p1 + p2) / p3\n\n\n\n\n\nWith inset elements\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this chapter, we will be trying out several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "We use p_load() function from the pacman library to load the required packages\n\npacman::p_load(ggrepel, \n               patchwork, \n               ggthemes, \n               hrbrthemes,\n               tidyverse) \n\n\n\n\nWe will be using a data file called Exam_data. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Ggrepel is able to hide the overlaps pretty well to prevent clutter\n\n\nShow the code\ng231 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS,\n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"With ggrepel\")\n\ng232 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Without ggrepel\")\n\np23 &lt;- g231 + g232\n\np23 + plot_annotation(title = \"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Trying out various themes from base\n\n\nShow the code\ng241 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"theme_gray\") \n\ng242 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"theme_void\") \n\ng243 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"theme_classic\") \n\ng244 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"theme_minimal\") \n\np241 &lt;- (g241 + g242) / (g243 + g244)\n\np241 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\nTrying out themes from ggthemes\n\n\nShow the code\ng245 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_economist\") +\n  theme_economist()\n\ng246 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_fivethirtyeight\") +\n  theme_fivethirtyeight()\n\ng247 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_hc\") +\n  theme_hc()\n\ng248 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_stata\") +\n  theme_stata()\n\np242 &lt;- (g245 + g246) / (g247 + g248)\n\np242 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\n\nTrying out themes from the hrbthems package\n\n\nShow the code\ng249 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_ft_rc\") +\n  theme_ft_rc()\n\ng2410 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_ipsum\") +\n  theme_ipsum()\n\ng2411 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_modern_rc\") +\n  theme_modern_rc()\n\ng2412 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_tinyhand\") +\n  theme_tinyhand()\n\np243 &lt;- (g249 + g2410) / (g2411 + g2412)\n\np243 + plot_annotation(title = \"Distribution of Maths score\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Using patchwork to combine multiple charts together to tell a complete story\nFirst, let’s create 3 different graphs\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\nNow, lets try to patch them together in various arrangements\n\n\nShow the code\n(p1 + p2) / p3\n\n\n\n\n\nWith inset elements\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "4a. Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.2.1-installing-and-loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.2.1-installing-and-loading-packages",
    "title": "4a. Visualising Distribution",
    "section": "4a.2.1 Installing and loading packages",
    "text": "4a.2.1 Installing and loading packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.2.2-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.2.2-data-import",
    "title": "4a. Visualising Distribution",
    "section": "4a.2.2 Data import",
    "text": "4a.2.2 Data import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.1-plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.1-plotting-ridgeline-graph-ggridges-method",
    "title": "4a. Visualising Distribution",
    "section": "4a.3.1 Plotting ridgeline graph: ggridges method",
    "text": "4a.3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nShow the Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.2-varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.2-varying-fill-colors-along-the-x-axis",
    "title": "4a. Visualising Distribution",
    "section": "4a.3.2 Varying fill colors along the x axis",
    "text": "4a.3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nShow the Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.3-mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.3-mapping-the-probabilities-directly-onto-colour",
    "title": "4a. Visualising Distribution",
    "section": "4a.3.3 Mapping the probabilities directly onto colour",
    "text": "4a.3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nShow the Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.4-ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.4-ridgeline-plots-with-quantile-lines",
    "title": "4a. Visualising Distribution",
    "section": "4a.3.4 Ridgeline plots with quantile lines",
    "text": "4a.3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\nShow the Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nShow the Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.1-plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.1-plotting-a-half-eye-graph",
    "title": "4a. Visualising Distribution",
    "section": "4a.4.1 Plotting a Half Eye graph",
    "text": "4a.4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n\nShow the Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.2-adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.2-adding-the-boxplot-with-geom_boxplot",
    "title": "4a. Visualising Distribution",
    "section": "4a.4.2 Adding the boxplot with geom_boxplot()",
    "text": "4a.4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\nShow the Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.3-adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.3-adding-the-dot-plots-with-stat_dots",
    "title": "4a. Visualising Distribution",
    "section": "4a.4.3 Adding the Dot Plots with stat_dots()",
    "text": "4a.4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nShow the Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.4-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.4-finishing-touch",
    "title": "4a. Visualising Distribution",
    "section": "4a.4.4 Finishing touch",
    "text": "4a.4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\nShow the Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "4c. Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.2.1-installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.2.1-installing-and-loading-the-packages",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.2.1 Installing and loading the packages",
    "text": "4c.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.2.2-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.2.2-data-import",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.2.2 Data import",
    "text": "4c.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.1-plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.1-plotting-standard-error-bars-of-point-estimates",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.3.1 Plotting standard error bars of point estimates",
    "text": "4c.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.2-plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.2-plotting-confidence-interval-of-point-estimates",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.3.2 Plotting confidence interval of point estimates",
    "text": "4c.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.3-visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.3-visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "4c.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nShow the code\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.1-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.1-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4c.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.2-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.2-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4c.4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE,\n    .width = c(0.95,0.99)) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.3-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.3-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4c.4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.5-visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.5-visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "4c.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;% filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Let’s find out."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home_Ex01",
    "section": "1.1 Setting the Scene",
    "text": "1.1 Setting the Scene\nOECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "title": "Take-home_Ex01",
    "section": "1.2 The Task",
    "text": "1.2 The Task\nThe 2022 Programme for International Student Assessment (PISA) data was released on December 5, 2022. PISA global education survey every three years to assess the education systems worldwide through testing 15 year old students in the subjects of mathematics, reading, and science.\nIn this exercise, we will use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to reveal:\n\nthe distribution of Singapore students’ performance in mathematics, reading, and science, and\nthe relationship between these performances with schools, gender and socioeconomic status of the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-r-packages",
    "title": "Take-home_Ex01",
    "section": "2.1 Load R packages",
    "text": "2.1 Load R packages\nWe begin by loading the required R packages using the pacman::p_load() function from the pacman package.\n\npacman::p_load(tidyverse, haven, ggplot2, patchwork, ggthemes, ggridges, ggdist)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-data",
    "title": "Take-home_Ex01",
    "section": "2.2 Load Data",
    "text": "2.2 Load Data\nThe data we are using can be found from the PISA 2022 Database. The database contains full set of responses from individual students, principals, and parents. In this task, we will only be looking at the students questionnaire data file. In particular, we are only interested in the data of students from Singapore.\nIn the following code chunk, the data set is first loaded into the environment, and filtered to only rows which country code is “SGP” before saving the data as a RData file for further use.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\nstu_qqq_SG &lt;- stu_qqq %&gt;% filter(CNT == \"SGP\")\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools",
    "title": "Take-home_Ex01",
    "section": "3.1 Schools",
    "text": "3.1 Schools\nSchools are represented by their respective IDs in the data set. We will convert them to factor as schools are nominal data.\n\n\nShow the code\n# Assign school ids as factor\ndf$sch_id &lt;- stu_qqq_SG$CNTSCHID %&gt;% factor()\n\n# Show summary\ndf %&gt;% \n  group_by(sch_id) %&gt;%\n  summarise(Count = length(sch_id))\n\n\n# A tibble: 164 × 2\n   sch_id   Count\n   &lt;fct&gt;    &lt;int&gt;\n 1 70200001    55\n 2 70200002    38\n 3 70200003    36\n 4 70200004    56\n 5 70200005    38\n 6 70200006    36\n 7 70200007    38\n 8 70200008    38\n 9 70200009    36\n10 70200010    36\n# ℹ 154 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender",
    "title": "Take-home_Ex01",
    "section": "3.2 Gender",
    "text": "3.2 Gender\nGender can be found directly in the data set. It is represented as 1 for Female and 2 for Male. Once again, we will convert them to factor and re-map them to Female and Male respectively.\n\n\nShow the code\n# Assign gender as factor and map them to Female and Male respectively\ndf$gender &lt;- stu_qqq_SG$ST004D01T %&gt;% factor(levels = c(1,2), labels = c(\"Female\",\"Male\"))\n\n# Show summary\ndf %&gt;% \n  group_by(gender) %&gt;%\n  summarise(Count = length(gender))\n\n\n# A tibble: 2 × 2\n  gender Count\n  &lt;fct&gt;  &lt;int&gt;\n1 Female  3248\n2 Male    3358"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#students-grades",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#students-grades",
    "title": "Take-home_Ex01",
    "section": "3.3 Students’ grades",
    "text": "3.3 Students’ grades\nFor students grades, we will be looking at Plausible values provided in the data set. For each subject (Math, Reading, Science), there are 10 Plausible values given. These values are sampled from the likely distribution of the student’s grade. For visualization purposes, we will take the average of the Plausible values as a representative of that subject’s grade.\nWe will also create a combined_grades column which is simply the sum of all 3 grades to represent the holistic performance of the student in all 3 subjects.\n\n\nShow the code\n# Select columns with \"PV\" and \"MATH\" in name, and take their average\ndf$math_grades &lt;- select(stu_qqq_SG, contains(\"PV\")&contains(\"MATH\")) %&gt;% rowMeans() %&gt;% as.numeric()\n\n# Select columns with \"PV\" and \"READ\" in name, and take their average\ndf$read_grades &lt;- select(stu_qqq_SG, contains(\"PV\")&contains(\"READ\")) %&gt;% rowMeans() %&gt;% as.numeric()\n\n# Select columns with \"PV\" and \"SCIE\" in name, and take their average\ndf$science_grades &lt;- select(stu_qqq_SG, contains(\"PV\")&contains(\"SCIE\")) %&gt;% rowMeans() %&gt;% as.numeric()\n\n# Sum up the previous three grade columns \ndf$combined_grades &lt;- df$math_grades + df$read_grades + df$science_grades\n\n# Show summary\ncols = c(\"math_grades\", \"read_grades\", \"science_grades\", \"combined_grades\")\nsummary(df[cols])\n\n\n  math_grades     read_grades    science_grades  combined_grades \n Min.   :262.6   Min.   :158.6   Min.   :242.0   Min.   : 680.9  \n 1st Qu.:506.2   1st Qu.:477.4   1st Qu.:498.9   1st Qu.:1483.9  \n Median :582.4   Median :553.6   Median :571.2   Median :1708.5  \n Mean   :574.0   Mean   :542.5   Mean   :561.0   Mean   :1677.4  \n 3rd Qu.:648.4   3rd Qu.:616.1   3rd Qu.:629.3   3rd Qu.:1888.5  \n Max.   :842.7   Max.   :797.6   Max.   :801.9   Max.   :2369.7"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools-1",
    "title": "Take-home_Ex01",
    "section": "3.4 Schools",
    "text": "3.4 Schools\nAs schools are identified only by id, it is difficult to make meaningful analysis based on other demographic factors individually. As such, we can group schools according to their students’ average combined grades. For our analysis, we will rank the schools according to their average combined grades of students’, and then create groups for school which produces the top 1-10th, 11-20th … 91-100th percentile of students.\n\n\nShow the code\n# Group by Schools and find average\ndf &lt;- df %&gt;% group_by(sch_id) %&gt;% mutate(average_student_grades = mean(combined_grades))\n\n# Rank and group schools according to the percentile of their average student grades\ndf$sch_rank &lt;- ntile(desc(df$average_student_grades), n = 10) %&gt;% as.factor()\n\n# Show summary\nhead(df[, c(\"sch_id\",\"average_student_grades\", \"sch_rank\")], 10)\n\n\n# A tibble: 10 × 3\n# Groups:   sch_id [10]\n   sch_id   average_student_grades sch_rank\n   &lt;fct&gt;                     &lt;dbl&gt; &lt;fct&gt;   \n 1 70200052                  1764. 3       \n 2 70200134                  1529. 9       \n 3 70200112                  1718. 3       \n 4 70200004                  1484. 9       \n 5 70200152                  1434. 10      \n 6 70200043                  1641. 6       \n 7 70200049                  1631. 6       \n 8 70200107                  1585. 7       \n 9 70200012                  1921. 2       \n10 70200061                  1671. 5"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status",
    "title": "Take-home_Ex01",
    "section": "3.5 Socioeconomic Status",
    "text": "3.5 Socioeconomic Status\nSocioeconomic status is represented by the PISA index of Economic, Social, and Cultural Status (ESCS). It is the composite score of 3 other indicators, namely:\n\nHISEI - Highest parental occupation status\nPAREDINT - Highest parental education\nHOMEPOS - Home possessions\n\nTo gain a more granular insight into Socioeconomic status on Grades, we will look into ESCS as well as its 3 components separately.\nSimilarly, we will also create groupings based on percentile ranking of ESCS scores.\n\n\nShow the code\n# Assign ESCS as numeric\ndf$escs &lt;- stu_qqq_SG$ESCS %&gt;% as.numeric()\n\n# Assign HISEI as numeric\ndf$hisei &lt;- stu_qqq_SG$HISEI %&gt;% as.numeric()\n\n# Assign PAREDINT as factor\ndf$paredint &lt;- stu_qqq_SG$PAREDINT %&gt;% as.factor()\n\n# Assign HOMEPOS as numeric\ndf$homepos &lt;- stu_qqq_SG$HOMEPOS %&gt;% as.numeric()\n\n# Rank and group students according to the percentile of their ESCS\ndf$escs_rank &lt;- ntile(desc(df$escs), n = 10) %&gt;% as.factor()\n\n# Show summary\nhead(df[, c(\"hisei\",\"paredint\",\"homepos\",\"escs\", \"escs_rank\")], 10)\n\n\n# A tibble: 10 × 5\n   hisei paredint homepos    escs escs_rank\n   &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;    \n 1  30.3 16        0.752   0.184  7        \n 2  77.1 14.5      0.784   0.826  4        \n 3  17   12        0.0666 -1.04   10       \n 4  43.3 12       -0.93   -0.961  10       \n 5  75.5 14.5     -0.895   0.0856 7        \n 6  57.6 16       -0.599   0.127  7        \n 7  70.3 12        0.0975 -0.0154 7        \n 8  80.8 16        0.799   1.16   2        \n 9  65.1 16        2.23    1.47   1        \n10  56.4 16        0.384   0.520  5"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-grades",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-grades",
    "title": "Take-home_Ex01",
    "section": "4.1 Distribution of Grades",
    "text": "4.1 Distribution of Grades\nWe begin the analysis by plotting the distribution of the three subjects: Math, Reading, and Science. On average, students perform better in Math and Science as compared to Reading.\n\n\nShow the code\n# Create density plot for Math Grades with Mean line\ng01 &lt;- ggplot(na.omit(df)) + \n  geom_density(alpha=.7, aes(x=math_grades),\n               fill = \"lightblue\") +\n  xlim(200, 900) + \n  xlab(\"Math\") + \n  ylab(\"Density\") + \n  geom_vline(xintercept = mean(df$math_grades),\n             colour = \"lightcoral\",\n             linetype = \"dashed\") +\n  annotate(\n    geom = \"text\", \n    x = mean(df$math_grades) - 70, \n    y = 0.004,\n    label = paste0(\"Mean: \", round(mean(df$math_grades),2)),\n    color = \"lightcoral\",\n    fontface = 2\n  )\n\n# Create density plot for Reading Grades with Mean line\ng02 &lt;- ggplot(na.omit(df)) + \n  geom_density(alpha=.7, aes(x=read_grades),\n               fill = \"lightblue\") +\n  xlim(200, 900) + \n  xlab(\"Reading\") + \n  ylab(\"Density\") + \n  geom_vline(xintercept = mean(df$read_grades),\n             colour = \"lightcoral\",\n             linetype = \"dashed\") +\n  annotate(\n    geom = \"text\", \n    x = mean(df$read_grades) - 70, \n    y = 0.004,\n    label = paste0(\"Mean: \", round(mean(df$read_grades),2)),\n    color = \"lightcoral\",\n    fontface = 2\n  )\n\n# Create density plot for Science Grades with Mean line\ng03 &lt;- ggplot(na.omit(df)) + \n  geom_density(alpha=.7, aes(x=science_grades),\n               fill = \"lightblue\") +\n  xlim(200, 900) + \n  xlab(\"Science\") + \n  ylab(\"Density\") + \n  geom_vline(xintercept = mean(df$science_grades),\n             colour = \"lightcoral\",\n             linetype = \"dashed\") +\n  annotate(\n    geom = \"text\", \n    x = mean(df$science_grades) - 70, \n    y = 0.004,\n    label = paste0(\"Mean: \", round(mean(df$science_grades),2)),\n    color = \"lightcoral\",\n    fontface = 2\n  )\n\n# Patchwork plots together\np0 &lt;- g01 / g02 / g03\n\n# Configure layout and title\np0 &lt;- p0 + \n  plot_layout(guides = \"collect\") + \n  plot_annotation(\n    title = \"Distribution of Grades\"\n  )\n\n# Plot with theme\np0 & theme_tufte()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performance-of-students-by-gender",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performance-of-students-by-gender",
    "title": "Take-home_Ex01",
    "section": "4.2 Performance of Students by Gender",
    "text": "4.2 Performance of Students by Gender\nNext, we analyse the grades of students based on gender.\nThough marginally, male students perform better than female students in Math and Science, but poorer in Reading on average. It is also noted that female students have a smaller variance across all subjects.\n\n\nShow the code\n# Create boxplot for Math Grades\ng11 &lt;- ggplot(df, aes(x=gender, y=math_grades, fill=gender)) + \n  geom_boxplot() + \n  ylim(200, 900) + \n  xlab(\"Gender\") +\n  ylab(\"Math\") +\n  scale_fill_manual(values = c(\"Male\" = \"lightblue\",\"Female\" = \"lightcoral\"))\n\n# Create boxplot for Reading Grades\ng12 &lt;- ggplot(df, aes(x=gender, y=read_grades, fill=gender)) + \n  geom_boxplot() + \n  ylim(200, 900) + \n  xlab(\"Gender\") +\n  ylab(\"Reading\") +\n  scale_fill_manual(values = c(\"Male\" = \"lightblue\",\"Female\" = \"lightcoral\"))\n\n# Create boxplot for Science Grades\ng13 &lt;- ggplot(df, aes(x=gender, y=science_grades, fill=gender)) + \n  geom_boxplot() + \n  ylim(200, 900) + \n  xlab(\"Gender\") +\n  ylab(\"Science\") +\n  scale_fill_manual(values = c(\"Male\" = \"lightblue\",\"Female\" = \"lightcoral\"))\n\n# Patchwork the 3 plots together\np1 &lt;- g11 + g12 + g13\n\n# Configure layout and title\np1 &lt;- p1 + \n  plot_layout(axis_titles = \"collect\",\n              guides = \"collect\") + \n  plot_annotation(\n    title = \"Grade distribution by Gender\",\n    subtitle = \"Does gender affect a student's grade?\"\n  )\n\n# Plot with theme\np1 & theme_tufte() & theme(legend.position = \"bottom\",\n                           legend.title = element_blank())"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status-impact-on-students-grades",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status-impact-on-students-grades",
    "title": "Take-home_Ex01",
    "section": "4.3 Socioeconomic status impact on students’ grades",
    "text": "4.3 Socioeconomic status impact on students’ grades\nNext, we study the relations between socioeconomic status and grades.\nFor the most parts, we observe that higher ESCS scores does lead to better results across all subjects. However, the same can not be said for the students belonging to the highest portion of ESCS as the trend starts to dip downwards at the end.\n\n\nShow the code\n# Define axis limits\ngrades_min &lt;- 150\ngrades_max &lt;- 850\nescs_min &lt;- min(df$escs)\nescs_max &lt;- max(df$escs)\n\n# Create scatter plot for ESCS on Combined Grades\ng21 &lt;- ggplot(na.omit(df), aes(x=escs, y=combined_grades)) +\n  geom_point(size = 0.5, alpha = 0.2) + \n  geom_smooth(color = \"lightcoral\") +\n  xlim(escs_min, escs_max) + \n  xlab(\"ESCS\") +\n  ylab(\"Combined Grades\")\n\n# Create a scatter plot for ESCS on Math Grades\ng22 &lt;- ggplot(na.omit(df), aes(x=escs, y=math_grades)) +\n  geom_point(size = 0.5,alpha = 0.2) +\n  geom_smooth(color = \"lightcoral\") +\n  xlim(escs_min, escs_max) + \n  ylim(grades_min, grades_max) + \n  xlab(\"ESCS\") +\n  ylab(\"Math\")\n\n# Create a scatter plot for ESCS on Reading Grades\ng23 &lt;- ggplot(na.omit(df), aes(x=escs, y=read_grades)) +\n  geom_point(size = 0.5,alpha = 0.2) +\n  geom_smooth(color = \"lightcoral\") +\n  xlim(escs_min, escs_max) + \n  ylim(grades_min, grades_max) + \n  xlab(\"ESCS\") +\n  ylab(\"Reading\")\n\n\n# Create a scatter plot for ESCS on Reading Grades\ng24 &lt;- ggplot(na.omit(df), aes(x=escs, y=science_grades)) +\n  geom_point(size = 0.5,alpha = 0.2) +\n  geom_smooth(color = \"lightcoral\") +\n  xlim(escs_min, escs_max) + \n  ylim(grades_min, grades_max) + \n  xlab(\"ESCS\") +\n  ylab(\"Science\")\n\n\n# Patchwork plots together\np2 &lt;- g21 | (g22 / g23 / g24) + \n  plot_layout(axes = \"collect\")\n\n# Configure layout and title\np2 &lt;- p2 + \n  plot_annotation(\n    title = \"Grades by ESCS\",\n    subtitle = \"Does socieconomic status affect a student's grade?\"\n  )\n\n# Plot with theme\np2 & theme_tufte()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status-impact-on-students-grades-part-2",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status-impact-on-students-grades-part-2",
    "title": "Take-home_Ex01",
    "section": "4.4 Socioeconomic status impact on students’ grades (Part 2)",
    "text": "4.4 Socioeconomic status impact on students’ grades (Part 2)\nNow, we take a more granular look into the components of ESCS; namely:\n\nHISEI - Highest parental occupation status\nPAREDINT - Highest parental education\nHOMEPOS - Home possessions\n\nFrom here, we learn that the dip towards the end is largely attributed to home possessions. Highest parental occupation status (HISEI) and highest parental education (PAREDINT) shows a mainly increasing trend.\n\n\nShow the code\n# Define axis limits\ngrades_min &lt;- min(df$combined_grades)\ngrades_max &lt;- max(df$combined_grades)\nhisei_min &lt;- min(df$hisei)\nhisei_max &lt;- max(df$hisei)\nhomepos_min &lt;- min(df$homepos)\nhomepos_max &lt;- max(df$homepos)\n\n# Create scatter plot for HISEI on Combined Grades\ng31 &lt;- ggplot(na.omit(df), aes(x=hisei, y=combined_grades)) +\n  geom_point(size = 0.5, alpha = 0.2) + \n  geom_smooth(color = \"lightcoral\") +\n  xlim(hisei_min, hisei_max) + \n  ylim(grades_min, grades_max) +\n  ylab(\"Combined Grades\") + \n  xlab(\"HISEI\")\n\n# Create scatter plot for PAREDINT on Combined Grades\ng32 &lt;- ggplot(na.omit(df), aes(x=paredint, y=combined_grades)) +\n  geom_boxplot() +\n  ylab(\"Combined Grades\") + \n  xlab(\"PAREDINT\")\n\n# Create scatter plot for HISEI on Combined Grades\ng33 &lt;- ggplot(na.omit(df), aes(x=homepos, y=combined_grades)) +\n  geom_point(size = 0.5, alpha = 0.2) + \n  geom_smooth(color = \"lightcoral\") +\n  xlim(homepos_min, homepos_max) + \n  ylim(grades_min, grades_max) +\n  ylab(\"Combined Grades\") + \n  xlab(\"HOMEPOS\")\n\n# Patchwork the plots together\np3 &lt;- g31 + g32 + g33 + plot_layout(axes = \"collect\")\n\n# Configure layout and title\np3 &lt;- p3 + \n  plot_annotation(\n    title = \"Grades by HISEI, PAREDINT, and HOMEPOS\",\n    subtitle = \"Examining ESCS by its components\"\n  )\n\n# Plot with theme\np3 & theme_tufte()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools-vs-escs",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools-vs-escs",
    "title": "Take-home_Ex01",
    "section": "4.5 Schools vs ESCS",
    "text": "4.5 Schools vs ESCS\nFinally, we take a look at schools against ESCS.\nIn the heatmap below, we easily observe that better performing schools are dominated by students belonging to higher ESCS brackets, and poorer performing schools by students in lower ESCS brackets. This suggests a strong correlation between the two factors which undermines any causation between grades, schools, and socioeconomic status as we are unable to accurately conclude if it is the school, or the ESCS that had more impact on the students’ grades.\n\n\nShow the code\n# Create 2d bin plot for ESCS ranks and School ranks\ng51 &lt;- ggplot(na.omit(df), aes(x=escs_rank, y=sch_rank)) +\n  geom_bin_2d() + \n  scale_fill_continuous(low = \"lightcyan\", high = \"lightcoral\") +\n  xlab(\"ESCS Percentile Groups\") +\n  ylab(\"School Percentile Groups\") +\n  scale_x_discrete(labels=c(\n    \"1\" = \"1 - 10\",\n    \"2\" = \"11 - 20\",\n    \"3\" = \"21 - 30\",\n    \"4\" = \"31 - 40\",\n    \"5\" = \"41 - 50\",\n    \"6\" = \"51 - 60\",\n    \"7\" = \"61 - 70\",\n    \"8\" = \"71 - 80\",\n    \"9\" = \"81 - 90\",\n    \"10\" = \"91 - 100\"\n  )) +\n  scale_y_discrete(labels=c(\n    \"1\" = \"1 - 10\",\n    \"2\" = \"11 - 20\",\n    \"3\" = \"21 - 30\",\n    \"4\" = \"31 - 40\",\n    \"5\" = \"41 - 50\",\n    \"6\" = \"51 - 60\",\n    \"7\" = \"61 - 70\",\n    \"8\" = \"71 - 80\",\n    \"9\" = \"81 - 90\",\n    \"10\" = \"91 - 100\"\n  )) + \n  plot_annotation(\n    title = \"Schools by ESCS\",\n    subtitle = \"Count of Students by School and ESCS Rankings\"\n  )\n\n# Plot with theme\ng51 & theme_tufte()"
  }
]