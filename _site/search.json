[
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "According to an office report as shown in the info-graphic below,\n\nDaily mean temperature are projected to increase by 1.4 to 4.6, and\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced.\n\nAs a visual analytics greenhorn, you are keen to apply newly acquired visual interactivity and visualizing uncertainty methods to validate the claims presented above."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "title": "Take-home_Ex03",
    "section": "2.1 Loading R packages",
    "text": "2.1 Loading R packages\nWe begin by loading the required R packages.\n\n\nShow the code\npacman::p_load(tidyverse,\n               dplyr,\n               patchwork, \n               ggthemes, \n               hrbrthemes,\n               ggiraph,\n               RColorBrewer)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-historical-daily-temperature-data-set",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-historical-daily-temperature-data-set",
    "title": "Take-home_Ex03",
    "section": "2.2 Importing historical daily temperature data set",
    "text": "2.2 Importing historical daily temperature data set\nThe data we will be using is the historical daily temperature data from Meteorological Service Singapore website. We will be looking at the daily records of July in the years 1983, 1993, 2003, 2013, and 2023 at the Changi Weather Station.\n\n\nShow the code\nfiles = list.files(\n  path = \"data/\",\n  pattern = \".*csv$\",\n  ignore.case = F,\n  full.names = T\n)\n\ndata = lapply(files, data.table::fread, encoding = \"Latin-1\")\ndata = dplyr::bind_rows(data)\ndata &lt;- as.data.frame(data)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-wrangling",
    "title": "Take-home_Ex03",
    "section": "2.3 Data Wrangling",
    "text": "2.3 Data Wrangling\nThe column name for temperature in 2023 is inconsistent with the names used before. It now has an extra latin character included (Â). The following code merges the 2 corresponding columns together into 1 column.\n\n\nShow the code\n# Merging column with latin character together with the one without\ndata$`Minimum Temperature (°C)` &lt;- ifelse(data$Year == 2023, data$`Minimum Temperature (Â°C)`, data$`Minimum Temperature (°C)`)\ndata$`Maximum Temperature (°C)` &lt;- ifelse(data$Year == 2023, data$`Maximum Temperature (Â°C)`, data$`Maximum Temperature (°C)`)\ndata$`Mean Temperature (°C)` &lt;- ifelse(data$Year == 2023, data$`Mean Temperature (Â°C)`, data$`Mean Temperature (°C)`)\n\n\nWe also want to look at the data at the Yearly level instead of daily. To do this, we group the data by Year and summarize their Mean values.\n\n\nShow the code\nmonth_data &lt;- data %&gt;% \n  group_by(Year) %&gt;% \n  summarise(\n    mean_month_temp = mean(`Mean Temperature (°C)`)\n  )\n\n\nNext, renaming some columns to remove white spaces in names for easier coding later on. Also, we drop all other irrelevant data.\n\n\nShow the code\n# Take only temperature and relevant data\nday_data &lt;-\n  data[c(\n    \"Station\",\n    \"Year\",\n    \"Month\",\n    \"Day\",\n    \"Mean Temperature (°C)\",\n    \"Maximum Temperature (°C)\",\n    \"Minimum Temperature (°C)\"\n  )]\n\n# Rename columns to remove white spaces\ncolnames(day_data) &lt;-\n  c(\n    \"Station\",\n    \"Year\",\n    \"Month\",\n    \"Day\",\n    \"mean_day_temp\",\n    \"max_day_temp\",\n    \"min_day_temp\"\n  )\n\n\nFinally, we want to do some forecasting to predict future temperatures. To do this, we use the lm function to perform linear regression. Then, we use the model to predict values for upcoming years 2033, 2043, and so on. We also store the 95% confidence interval values which will be used to observe the prediction range later.\n\n\nShow the code\n# Regression with day data\nmodel = lm(mean_day_temp ~ Year, day_data)\n\n# Create results data frame\nforecast = data.frame(Year = c(2033,\n                               2043,\n                               2053,\n                               2063,\n                               2073,\n                               2083,\n                               2093))\n\n# Forecast temperatures and store in results data frame\nforecast = cbind(forecast, predict(model, forecast, interval = \"confidence\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#without-interactivity",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#without-interactivity",
    "title": "Take-home_Ex03",
    "section": "Without interactivity",
    "text": "Without interactivity\nThe visualization below displays historical temperature records for the month of December measured at Singapore’s Changi Weather Station every 10 years from 1983 to 2023. In addition, a forecast is made using simple linear regression from 2033 to 2093 which shows the expected rise in temperature till the end of the century.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\npalette_choice &lt;- c(\"#66C2A5\",\"#FC8D62\",\"#8DA0CB\",\"#E78AC3\",\"#A6D854\",\"blue\")\n\np1 &lt;- ggplot(data=day_data, \n             aes(x = Day,\n                 y = mean_day_temp,\n                 color = as.factor(Year))) +\n  geom_line(\n    show.legend = F) +\n  ylab(element_blank()) +\n  xlab(\"Day\") +\n  ggtitle(\"Daily temperature in December\") +\n  theme(\n    plot.title = element_text(size = 10),\n    axis.title.x = element_text(size = 8)\n  ) +\n  scale_color_manual(name = \"Year\", values = palette_choice)\n\np2 &lt;- ggplot(\n  data=day_data, \n  aes(x = as.factor(Year),\n      y = mean_day_temp,\n      fill = as.factor(Year))\n) +\n  geom_boxplot(\n    linewidth = 0.1,\n    outlier.shape = NA,\n    show.legend = F\n  ) +\n  ylab(element_blank()) +\n  xlab(element_blank()) +\n  theme(\n    axis.text.x = element_blank(), \n    axis.ticks.x = element_blank()) +\n  scale_fill_manual(name = \"Year\", values = palette_choice)\n\np3 &lt;- ggplot() +\n  geom_point(\n    data = month_data,\n    aes(x = Year,\n        y = mean_month_temp,\n        color = as.factor(Year))\n  ) + \n  geom_pointrange(\n    data = forecast,\n    aes(x = Year,\n        y = fit,\n        color = c(\"Forecast\"),\n        ymin = lwr,\n        ymax = upr,\n    ),\n    fatten = 0.5\n  ) +\n  ylab(element_blank()) +\n  ggtitle(\"Mean December Temperature Forecast\") +\n  theme(\n    plot.title = element_text(size = 10),\n    axis.title.x = element_text(size = 8)\n  ) +\n  scale_x_continuous(\n    breaks = seq(1983,2093,10),\n    limits = c(1983,2093)\n  ) +\n  scale_color_manual(name = \"Year\", values = palette_choice)\n\ny_lab &lt;- \n  ggplot() + \n  annotate(geom = \"text\", x = 1, y = 1, label = \"Temperature (°C)\", angle = 90) +\n  coord_cartesian(clip = \"off\") +\n  theme_void()\n\n\ny_lab + ((p1 + p2 + plot_layout(\n  axes = \"collect\",\n  widths = c(4,1)\n)) / p3 + \n  plot_layout(\n    guides = \"collect\",\n    axes = \"collect\",\n    axis_titles = \"collect\",\n    heights = c(1,1)\n  )) +\n  plot_layout(\n    widths = c(0.1,1)\n  ) +\n  plot_annotation(\n    title = \"Singapore's Daily Temperature on the rise\",\n    subtitle = \"Expected to rise by 1.4 to 4.6 by end of the Century\",\n    caption = \"*Historic temperature records are obtained from Changi Weather station\",\n    theme = theme(plot.title = element_text(size = 22))\n  )              \n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nTemperature did rise in the last half century as seen in the line chart and boxplot, more notably between 1983 to 1993 and 2013 to 2023.\nThe lowest daily mean temperature in 2023 is almost as high as the highest daily mean temperature in 1983.\nOverall, the mean temperature in December increased from 25.4 in 1983 to 27.3 in 2023, an average rise of about 0.48 each year.\nFollowing this trend, the temperature is predicted to reach a monthly mean of 29.8 in 2093, with a 95% confidence interval between the high of 30.7 and the low of 28.9.\nThis means that temperature will rise by around 1.6 to 3.4 by the end of the century, which falls slightly short of the claim that temperature is expected to rise by around 1.4 to 4.6 in the same period."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#with-interactivity",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#with-interactivity",
    "title": "Take-home_Ex03",
    "section": "With interactivity",
    "text": "With interactivity\nNow, we add interactivity to the visualization.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\npalette_choice &lt;- c(\"#66C2A5\",\"#FC8D62\",\"#8DA0CB\",\"#E78AC3\",\"#A6D854\",\"blue\")\n\np1 &lt;- ggplot(data=day_data, \n             aes(x = Day,\n                 y = mean_day_temp,\n                 color = as.factor(Year))) +\n  geom_line_interactive(              \n    aes(tooltip = paste(\"Year: \", Year), \n        data_id = Year),\n    show.legend = F) +\n  ylab(element_blank()) +\n  xlab(\"Day\") +\n  ggtitle(\"Daily temperature in December\") +\n  theme(\n    plot.title = element_text(size = 10),\n    axis.title.x = element_text(size = 8)\n  ) +\n  scale_color_manual(name = \"Year\", values = palette_choice)\n\np2 &lt;- ggplot(\n  data=day_data, \n  aes(x = as.factor(Year),\n      y = mean_day_temp,\n      fill = as.factor(Year))\n) +\n  geom_boxplot_interactive(\n    aes(tooltip = paste(\"Year: \", Year), \n        data_id = Year),\n    linewidth = 0.1,\n    outlier.shape = NA,\n    show.legend = F\n  ) +\n  ylab(element_blank()) +\n  xlab(element_blank()) +\n  theme(\n    axis.text.x = element_blank(), \n    axis.ticks.x = element_blank()) +\n  scale_fill_manual(name = \"Year\", values = palette_choice)\n\np3 &lt;- ggplot() +\n  geom_point_interactive(\n    data = month_data,\n    aes(x = Year,\n        y = mean_month_temp,\n        tooltip = paste(\"Year: \", Year, \"\\nMean Monthly Temp: \", round(mean_month_temp,1), \"°C\"), \n        data_id = Year,\n        color = as.factor(Year))\n  ) + \n  geom_pointrange_interactive(\n    data = forecast,\n    aes(x = Year,\n        y = fit,\n        color = c(\"Forecast\"),\n        ymin = lwr,\n        ymax = upr,\n        tooltip = paste(Year, \n                        \" Forecast:\\n\", \n                        round(fit,2), \n                        \" +/- \", \n                        round(fit-lwr,2),\n                        \"°C\"),\n        data_id = Year),\n    fatten = 0.5\n  ) +\n  ylab(element_blank()) +\n  ggtitle(\"Mean December Temperature Forecast\") +\n  theme(\n    plot.title = element_text(size = 10),\n    axis.title.x = element_text(size = 8)\n  ) +\n  scale_x_continuous(\n    breaks = seq(1983,2093,10),\n    limits = c(1983,2093)\n  ) +\n  scale_color_manual(name = \"Year\", values = palette_choice)\n\ny_lab &lt;- \n  ggplot() + \n  annotate(geom = \"text\", x = 1, y = 1, label = \"Temperature (°C)\", angle = 90) +\n  coord_cartesian(clip = \"off\") +\n  theme_void()\n\ngirafe(                                  \n  code = print(y_lab + ((p1 + p2 + plot_layout(\n         axes = \"collect\",\n         widths = c(4,1)\n       )) / p3 + \n      plot_layout(\n        guides = \"collect\",\n        axes = \"collect\",\n        axis_titles = \"collect\",\n        heights = c(1,1)\n      )) +\n      plot_layout(\n        widths = c(0.1,1)\n      ) +\n      plot_annotation(\n        title = \"Singapore's Daily Temperature on the rise\",\n        subtitle = \"Expected to rise by 1.4 to 4.6 by end of the Century\",\n        caption = \"*Historic temperature records are obtained from Changi Weather station\",\n        theme = theme(plot.title = element_text(size = 22))\n      )),               \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"stroke-width:2;\"),\n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                        \n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nHovering over any point would highlight the corresponding years in the other charts, making it easier to view the distribution for each year.\nTooltips displays mean monthly and predicted temperatures when hovering over points or forecasts in the point/pointrange chart. Users no longer need to check the y-axis on the far left."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Let’s find out."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home_Ex01",
    "section": "1.1 Setting the Scene",
    "text": "1.1 Setting the Scene\nOECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "title": "Take-home_Ex01",
    "section": "1.2 The Task",
    "text": "1.2 The Task\nThe 2022 Programme for International Student Assessment (PISA) data was released on December 5, 2022. PISA global education survey every three years to assess the education systems worldwide through testing 15 year old students in the subjects of mathematics, reading, and science.\nIn this exercise, we will use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to reveal:\n\nthe distribution of Singapore students’ performance in mathematics, reading, and science, and\nthe relationship between these performances with schools, gender and socioeconomic status of the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-r-packages",
    "title": "Take-home_Ex01",
    "section": "2.1 Load R packages",
    "text": "2.1 Load R packages\nWe begin by loading the required R packages using the pacman::p_load() function from the pacman package.\n\npacman::p_load(tidyverse, haven, ggplot2, patchwork, ggthemes, ggridges, ggdist)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-data",
    "title": "Take-home_Ex01",
    "section": "2.2 Load Data",
    "text": "2.2 Load Data\nThe data we are using can be found from the PISA 2022 Database. The database contains full set of responses from individual students, principals, and parents. In this task, we will only be looking at the students questionnaire data file. In particular, we are only interested in the data of students from Singapore.\nIn the following code chunk, the data set is first loaded into the environment, and filtered to only rows which country code is “SGP” before saving the data as a RData file for further use.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\nstu_qqq_SG &lt;- stu_qqq %&gt;% filter(CNT == \"SGP\")\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools",
    "title": "Take-home_Ex01",
    "section": "3.1 Schools",
    "text": "3.1 Schools\nSchools are represented by their respective IDs in the data set. We will convert them to factor as schools are nominal data.\n\n\nShow the code\n# Assign school ids as factor\ndf$sch_id &lt;- stu_qqq_SG$CNTSCHID %&gt;% factor()\n\n# Show summary\ndf %&gt;% \n  group_by(sch_id) %&gt;%\n  summarise(Count = length(sch_id))\n\n\n# A tibble: 164 × 2\n   sch_id   Count\n   &lt;fct&gt;    &lt;int&gt;\n 1 70200001    55\n 2 70200002    38\n 3 70200003    36\n 4 70200004    56\n 5 70200005    38\n 6 70200006    36\n 7 70200007    38\n 8 70200008    38\n 9 70200009    36\n10 70200010    36\n# ℹ 154 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender",
    "title": "Take-home_Ex01",
    "section": "3.2 Gender",
    "text": "3.2 Gender\nGender can be found directly in the data set. It is represented as 1 for Female and 2 for Male. Once again, we will convert them to factor and re-map them to Female and Male respectively.\n\n\nShow the code\n# Assign gender as factor and map them to Female and Male respectively\ndf$gender &lt;- stu_qqq_SG$ST004D01T %&gt;% factor(levels = c(1,2), labels = c(\"Female\",\"Male\"))\n\n# Show summary\ndf %&gt;% \n  group_by(gender) %&gt;%\n  summarise(Count = length(gender))\n\n\n# A tibble: 2 × 2\n  gender Count\n  &lt;fct&gt;  &lt;int&gt;\n1 Female  3248\n2 Male    3358"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#students-grades",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#students-grades",
    "title": "Take-home_Ex01",
    "section": "3.3 Students’ grades",
    "text": "3.3 Students’ grades\nFor students grades, we will be looking at Plausible values provided in the data set. For each subject (Math, Reading, Science), there are 10 Plausible values given. These values are sampled from the likely distribution of the student’s grade. For visualization purposes, we will take the average of the Plausible values as a representative of that subject’s grade.\nWe will also create a combined_grades column which is simply the sum of all 3 grades to represent the holistic performance of the student in all 3 subjects.\n\n\nShow the code\n# Select columns with \"PV\" and \"MATH\" in name, and take their average\ndf$math_grades &lt;- select(stu_qqq_SG, contains(\"PV\")&contains(\"MATH\")) %&gt;% rowMeans() %&gt;% as.numeric()\n\n# Select columns with \"PV\" and \"READ\" in name, and take their average\ndf$read_grades &lt;- select(stu_qqq_SG, contains(\"PV\")&contains(\"READ\")) %&gt;% rowMeans() %&gt;% as.numeric()\n\n# Select columns with \"PV\" and \"SCIE\" in name, and take their average\ndf$science_grades &lt;- select(stu_qqq_SG, contains(\"PV\")&contains(\"SCIE\")) %&gt;% rowMeans() %&gt;% as.numeric()\n\n# Sum up the previous three grade columns \ndf$combined_grades &lt;- df$math_grades + df$read_grades + df$science_grades\n\n# Show summary\ncols = c(\"math_grades\", \"read_grades\", \"science_grades\", \"combined_grades\")\nsummary(df[cols])\n\n\n  math_grades     read_grades    science_grades  combined_grades \n Min.   :262.6   Min.   :158.6   Min.   :242.0   Min.   : 680.9  \n 1st Qu.:506.2   1st Qu.:477.4   1st Qu.:498.9   1st Qu.:1483.9  \n Median :582.4   Median :553.6   Median :571.2   Median :1708.5  \n Mean   :574.0   Mean   :542.5   Mean   :561.0   Mean   :1677.4  \n 3rd Qu.:648.4   3rd Qu.:616.1   3rd Qu.:629.3   3rd Qu.:1888.5  \n Max.   :842.7   Max.   :797.6   Max.   :801.9   Max.   :2369.7"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools-1",
    "title": "Take-home_Ex01",
    "section": "3.4 Schools",
    "text": "3.4 Schools\nAs schools are identified only by id, it is difficult to make meaningful analysis based on other demographic factors individually. As such, we can group schools according to their students’ average combined grades. For our analysis, we will rank the schools according to their average combined grades of students’, and then create groups for school which produces the top 1-10th, 11-20th … 91-100th percentile of students.\n\n\nShow the code\n# Group by Schools and find average\ndf &lt;- df %&gt;% group_by(sch_id) %&gt;% mutate(average_student_grades = mean(combined_grades))\n\n# Rank and group schools according to the percentile of their average student grades\ndf$sch_rank &lt;- ntile(desc(df$average_student_grades), n = 10) %&gt;% as.factor()\n\n# Show summary\nhead(df[, c(\"sch_id\",\"average_student_grades\", \"sch_rank\")], 10)\n\n\n# A tibble: 10 × 3\n# Groups:   sch_id [10]\n   sch_id   average_student_grades sch_rank\n   &lt;fct&gt;                     &lt;dbl&gt; &lt;fct&gt;   \n 1 70200052                  1764. 3       \n 2 70200134                  1529. 9       \n 3 70200112                  1718. 3       \n 4 70200004                  1484. 9       \n 5 70200152                  1434. 10      \n 6 70200043                  1641. 6       \n 7 70200049                  1631. 6       \n 8 70200107                  1585. 7       \n 9 70200012                  1921. 2       \n10 70200061                  1671. 5"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status",
    "title": "Take-home_Ex01",
    "section": "3.5 Socioeconomic Status",
    "text": "3.5 Socioeconomic Status\nSocioeconomic status is represented by the PISA index of Economic, Social, and Cultural Status (ESCS). It is the composite score of 3 other indicators, namely:\n\nHISEI - Highest parental occupation status\nPAREDINT - Highest parental education\nHOMEPOS - Home possessions\n\nTo gain a more granular insight into Socioeconomic status on Grades, we will look into ESCS as well as its 3 components separately.\nSimilarly, we will also create groupings based on percentile ranking of ESCS scores.\n\n\nShow the code\n# Assign ESCS as numeric\ndf$escs &lt;- stu_qqq_SG$ESCS %&gt;% as.numeric()\n\n# Assign HISEI as numeric\ndf$hisei &lt;- stu_qqq_SG$HISEI %&gt;% as.numeric()\n\n# Assign PAREDINT as factor\ndf$paredint &lt;- stu_qqq_SG$PAREDINT %&gt;% as.factor()\n\n# Assign HOMEPOS as numeric\ndf$homepos &lt;- stu_qqq_SG$HOMEPOS %&gt;% as.numeric()\n\n# Rank and group students according to the percentile of their ESCS\ndf$escs_rank &lt;- ntile(desc(df$escs), n = 10) %&gt;% as.factor()\n\n# Show summary\nhead(df[, c(\"hisei\",\"paredint\",\"homepos\",\"escs\", \"escs_rank\")], 10)\n\n\n# A tibble: 10 × 5\n   hisei paredint homepos    escs escs_rank\n   &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;    \n 1  30.3 16        0.752   0.184  7        \n 2  77.1 14.5      0.784   0.826  4        \n 3  17   12        0.0666 -1.04   10       \n 4  43.3 12       -0.93   -0.961  10       \n 5  75.5 14.5     -0.895   0.0856 7        \n 6  57.6 16       -0.599   0.127  7        \n 7  70.3 12        0.0975 -0.0154 7        \n 8  80.8 16        0.799   1.16   2        \n 9  65.1 16        2.23    1.47   1        \n10  56.4 16        0.384   0.520  5"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-grades",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-grades",
    "title": "Take-home_Ex01",
    "section": "4.1 Distribution of Grades",
    "text": "4.1 Distribution of Grades\nWe begin the analysis by plotting the distribution of the three subjects: Math, Reading, and Science. On average, students perform better in Math and Science as compared to Reading.\n\n\nShow the code\n# Create density plot for Math Grades with Mean line\ng01 &lt;- ggplot(na.omit(df)) + \n  geom_density(alpha=.7, aes(x=math_grades),\n               fill = \"lightblue\") +\n  xlim(200, 900) + \n  xlab(\"Math\") + \n  ylab(\"Density\") + \n  geom_vline(xintercept = mean(df$math_grades),\n             colour = \"lightcoral\",\n             linetype = \"dashed\") +\n  annotate(\n    geom = \"text\", \n    x = mean(df$math_grades) - 70, \n    y = 0.004,\n    label = paste0(\"Mean: \", round(mean(df$math_grades),2)),\n    color = \"lightcoral\",\n    fontface = 2\n  )\n\n# Create density plot for Reading Grades with Mean line\ng02 &lt;- ggplot(na.omit(df)) + \n  geom_density(alpha=.7, aes(x=read_grades),\n               fill = \"lightblue\") +\n  xlim(200, 900) + \n  xlab(\"Reading\") + \n  ylab(\"Density\") + \n  geom_vline(xintercept = mean(df$read_grades),\n             colour = \"lightcoral\",\n             linetype = \"dashed\") +\n  annotate(\n    geom = \"text\", \n    x = mean(df$read_grades) - 70, \n    y = 0.004,\n    label = paste0(\"Mean: \", round(mean(df$read_grades),2)),\n    color = \"lightcoral\",\n    fontface = 2\n  )\n\n# Create density plot for Science Grades with Mean line\ng03 &lt;- ggplot(na.omit(df)) + \n  geom_density(alpha=.7, aes(x=science_grades),\n               fill = \"lightblue\") +\n  xlim(200, 900) + \n  xlab(\"Science\") + \n  ylab(\"Density\") + \n  geom_vline(xintercept = mean(df$science_grades),\n             colour = \"lightcoral\",\n             linetype = \"dashed\") +\n  annotate(\n    geom = \"text\", \n    x = mean(df$science_grades) - 70, \n    y = 0.004,\n    label = paste0(\"Mean: \", round(mean(df$science_grades),2)),\n    color = \"lightcoral\",\n    fontface = 2\n  )\n\n# Patchwork plots together\np0 &lt;- g01 / g02 / g03\n\n# Configure layout and title\np0 &lt;- p0 + \n  plot_layout(guides = \"collect\") + \n  plot_annotation(\n    title = \"Distribution of Grades\"\n  )\n\n# Plot with theme\np0 & theme_tufte()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performance-of-students-by-gender",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performance-of-students-by-gender",
    "title": "Take-home_Ex01",
    "section": "4.2 Performance of Students by Gender",
    "text": "4.2 Performance of Students by Gender\nNext, we analyse the grades of students based on gender.\nThough marginally, male students perform better than female students in Math and Science, but poorer in Reading on average. It is also noted that female students have a smaller variance across all subjects.\n\n\nShow the code\n# Create boxplot for Math Grades\ng11 &lt;- ggplot(df, aes(x=gender, y=math_grades, fill=gender)) + \n  geom_boxplot() + \n  ylim(200, 900) + \n  xlab(\"Gender\") +\n  ylab(\"Math\") +\n  scale_fill_manual(values = c(\"Male\" = \"lightblue\",\"Female\" = \"lightcoral\"))\n\n# Create boxplot for Reading Grades\ng12 &lt;- ggplot(df, aes(x=gender, y=read_grades, fill=gender)) + \n  geom_boxplot() + \n  ylim(200, 900) + \n  xlab(\"Gender\") +\n  ylab(\"Reading\") +\n  scale_fill_manual(values = c(\"Male\" = \"lightblue\",\"Female\" = \"lightcoral\"))\n\n# Create boxplot for Science Grades\ng13 &lt;- ggplot(df, aes(x=gender, y=science_grades, fill=gender)) + \n  geom_boxplot() + \n  ylim(200, 900) + \n  xlab(\"Gender\") +\n  ylab(\"Science\") +\n  scale_fill_manual(values = c(\"Male\" = \"lightblue\",\"Female\" = \"lightcoral\"))\n\n# Patchwork the 3 plots together\np1 &lt;- g11 + g12 + g13\n\n# Configure layout and title\np1 &lt;- p1 + \n  plot_layout(axis_titles = \"collect\",\n              guides = \"collect\") + \n  plot_annotation(\n    title = \"Grade distribution by Gender\",\n    subtitle = \"Does gender affect a student's grade?\"\n  )\n\n# Plot with theme\np1 & theme_tufte() & theme(legend.position = \"bottom\",\n                           legend.title = element_blank())"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status-impact-on-students-grades",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status-impact-on-students-grades",
    "title": "Take-home_Ex01",
    "section": "4.3 Socioeconomic status impact on students’ grades",
    "text": "4.3 Socioeconomic status impact on students’ grades\nNext, we study the relations between socioeconomic status and grades.\nFor the most parts, we observe that higher ESCS scores does lead to better results across all subjects. However, the same can not be said for the students belonging to the highest portion of ESCS as the trend starts to dip downwards at the end.\n\n\nShow the code\n# Define axis limits\ngrades_min &lt;- 150\ngrades_max &lt;- 850\nescs_min &lt;- min(df$escs)\nescs_max &lt;- max(df$escs)\n\n# Create scatter plot for ESCS on Combined Grades\ng21 &lt;- ggplot(na.omit(df), aes(x=escs, y=combined_grades)) +\n  geom_point(size = 0.5, alpha = 0.2) + \n  geom_smooth(color = \"lightcoral\") +\n  xlim(escs_min, escs_max) + \n  xlab(\"ESCS\") +\n  ylab(\"Combined Grades\")\n\n# Create a scatter plot for ESCS on Math Grades\ng22 &lt;- ggplot(na.omit(df), aes(x=escs, y=math_grades)) +\n  geom_point(size = 0.5,alpha = 0.2) +\n  geom_smooth(color = \"lightcoral\") +\n  xlim(escs_min, escs_max) + \n  ylim(grades_min, grades_max) + \n  xlab(\"ESCS\") +\n  ylab(\"Math\")\n\n# Create a scatter plot for ESCS on Reading Grades\ng23 &lt;- ggplot(na.omit(df), aes(x=escs, y=read_grades)) +\n  geom_point(size = 0.5,alpha = 0.2) +\n  geom_smooth(color = \"lightcoral\") +\n  xlim(escs_min, escs_max) + \n  ylim(grades_min, grades_max) + \n  xlab(\"ESCS\") +\n  ylab(\"Reading\")\n\n\n# Create a scatter plot for ESCS on Reading Grades\ng24 &lt;- ggplot(na.omit(df), aes(x=escs, y=science_grades)) +\n  geom_point(size = 0.5,alpha = 0.2) +\n  geom_smooth(color = \"lightcoral\") +\n  xlim(escs_min, escs_max) + \n  ylim(grades_min, grades_max) + \n  xlab(\"ESCS\") +\n  ylab(\"Science\")\n\n\n# Patchwork plots together\np2 &lt;- g21 | (g22 / g23 / g24) + \n  plot_layout(axes = \"collect\")\n\n# Configure layout and title\np2 &lt;- p2 + \n  plot_annotation(\n    title = \"Grades by ESCS\",\n    subtitle = \"Does socieconomic status affect a student's grade?\"\n  )\n\n# Plot with theme\np2 & theme_tufte()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status-impact-on-students-grades-part-2",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status-impact-on-students-grades-part-2",
    "title": "Take-home_Ex01",
    "section": "4.4 Socioeconomic status impact on students’ grades (Part 2)",
    "text": "4.4 Socioeconomic status impact on students’ grades (Part 2)\nNow, we take a more granular look into the components of ESCS; namely:\n\nHISEI - Highest parental occupation status\nPAREDINT - Highest parental education\nHOMEPOS - Home possessions\n\nFrom here, we learn that the dip towards the end is largely attributed to home possessions. Highest parental occupation status (HISEI) and highest parental education (PAREDINT) shows a mainly increasing trend.\n\n\nShow the code\n# Define axis limits\ngrades_min &lt;- min(df$combined_grades)\ngrades_max &lt;- max(df$combined_grades)\nhisei_min &lt;- min(df$hisei)\nhisei_max &lt;- max(df$hisei)\nhomepos_min &lt;- min(df$homepos)\nhomepos_max &lt;- max(df$homepos)\n\n# Create scatter plot for HISEI on Combined Grades\ng31 &lt;- ggplot(na.omit(df), aes(x=hisei, y=combined_grades)) +\n  geom_point(size = 0.5, alpha = 0.2) + \n  geom_smooth(color = \"lightcoral\") +\n  xlim(hisei_min, hisei_max) + \n  ylim(grades_min, grades_max) +\n  ylab(\"Combined Grades\") + \n  xlab(\"HISEI\")\n\n# Create scatter plot for PAREDINT on Combined Grades\ng32 &lt;- ggplot(na.omit(df), aes(x=paredint, y=combined_grades)) +\n  geom_boxplot() +\n  ylab(\"Combined Grades\") + \n  xlab(\"PAREDINT\")\n\n# Create scatter plot for HISEI on Combined Grades\ng33 &lt;- ggplot(na.omit(df), aes(x=homepos, y=combined_grades)) +\n  geom_point(size = 0.5, alpha = 0.2) + \n  geom_smooth(color = \"lightcoral\") +\n  xlim(homepos_min, homepos_max) + \n  ylim(grades_min, grades_max) +\n  ylab(\"Combined Grades\") + \n  xlab(\"HOMEPOS\")\n\n# Patchwork the plots together\np3 &lt;- g31 + g32 + g33 + plot_layout(axes = \"collect\")\n\n# Configure layout and title\np3 &lt;- p3 + \n  plot_annotation(\n    title = \"Grades by HISEI, PAREDINT, and HOMEPOS\",\n    subtitle = \"Examining ESCS by its components\"\n  )\n\n# Plot with theme\np3 & theme_tufte()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools-vs-escs",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#schools-vs-escs",
    "title": "Take-home_Ex01",
    "section": "4.5 Schools vs ESCS",
    "text": "4.5 Schools vs ESCS\nFinally, we take a look at schools against ESCS.\nIn the heatmap below, we easily observe that better performing schools are dominated by students belonging to higher ESCS brackets, and poorer performing schools by students in lower ESCS brackets. This suggests a strong correlation between the two factors which undermines any causation between grades, schools, and socioeconomic status as we are unable to accurately conclude if it is the school, or the ESCS that had more impact on the students’ grades.\n\n\nShow the code\n# Create 2d bin plot for ESCS ranks and School ranks\ng51 &lt;- ggplot(na.omit(df), aes(x=escs_rank, y=sch_rank)) +\n  geom_bin_2d() + \n  scale_fill_continuous(low = \"lightcyan\", high = \"lightcoral\") +\n  xlab(\"ESCS Percentile Groups\") +\n  ylab(\"School Percentile Groups\") +\n  scale_x_discrete(labels=c(\n    \"1\" = \"1 - 10\",\n    \"2\" = \"11 - 20\",\n    \"3\" = \"21 - 30\",\n    \"4\" = \"31 - 40\",\n    \"5\" = \"41 - 50\",\n    \"6\" = \"51 - 60\",\n    \"7\" = \"61 - 70\",\n    \"8\" = \"71 - 80\",\n    \"9\" = \"81 - 90\",\n    \"10\" = \"91 - 100\"\n  )) +\n  scale_y_discrete(labels=c(\n    \"1\" = \"1 - 10\",\n    \"2\" = \"11 - 20\",\n    \"3\" = \"21 - 30\",\n    \"4\" = \"31 - 40\",\n    \"5\" = \"41 - 50\",\n    \"6\" = \"51 - 60\",\n    \"7\" = \"61 - 70\",\n    \"8\" = \"71 - 80\",\n    \"9\" = \"81 - 90\",\n    \"10\" = \"91 - 100\"\n  )) + \n  plot_annotation(\n    title = \"Schools by ESCS\",\n    subtitle = \"Count of Students by School and ESCS Rankings\"\n  )\n\n# Plot with theme\ng51 & theme_tufte()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;% filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html",
    "title": "5e. Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.3.1-importing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.3.1-importing-the-data-set",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.3.1 Importing the data set",
    "text": "5e.3.1 Importing the data set\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.3.2-data-wrangling-and-manipulation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.3.2-data-wrangling-and-manipulation",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.3.2 Data Wrangling and Manipulation",
    "text": "5e.3.2 Data Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.3.3-grouped-summaries",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.3.3-grouped-summaries",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.3.3 Grouped summaries",
    "text": "5e.3.3 Grouped summaries\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.1-designing-a-static-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.1-designing-a-static-treemap",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.1 Designing a static treemap",
    "text": "5e.4.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.2-using-the-basic-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.2-using-the-basic-arguments",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.2 Using the basic arguments",
    "text": "5e.4.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\nWarning:\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.3-working-with-vcolor-and-type-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.3-working-with-vcolor-and-type-arguments",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.3 Working with vColor and type arguments",
    "text": "5e.4.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThinking to learn from the conde chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.4-colours-in-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.4-colours-in-treemap-package",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.4 Colours in treemap package",
    "text": "5e.4.4 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.5-the-value-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.5-the-value-type-treemap",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.5 The “value” type treemap",
    "text": "5e.4.5 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.6-the-manual-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.6-the-manual-type-treemap",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.6 The “manual” type treemap",
    "text": "5e.4.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.7-treemap-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.7-treemap-layout",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.7 Treemap Layout",
    "text": "5e.4.7 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.8-working-with-algorithm-argument",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.8-working-with-algorithm-argument",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.8 Working with algorithm argument",
    "text": "5e.4.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.9-using-sortid",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.4.9-using-sortid",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.4.9 Using sortID",
    "text": "5e.4.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.5.1-designing-a-basic-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.5.1-designing-a-basic-treemap",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.5.1 Designing a basic treemap",
    "text": "5e.5.1 Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.5.2-defining-hierarchy",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.5.2-defining-hierarchy",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.5.2 Defining hierarchy",
    "text": "5e.5.2 Defining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.6.1-installing-d3treer-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.6.1-installing-d3treer-package",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.6.1 Installing d3treeR package",
    "text": "5e.6.1 Installing d3treeR package\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\nNow you are ready to launch d3treeR package\n\n\n#library(devtools)\n#install_github(\"timelyportfolio/d3treeR\")\n\n\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.6.2-designing-an-interactive-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#e.6.2-designing-an-interactive-treemap",
    "title": "5e. Treemap Visualisation with R",
    "section": "5e.6.2 Designing An Interactive Treemap",
    "text": "5e.6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.3.1-importing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.3.1-importing-the-data-set",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.3.1 Importing the data set",
    "text": "5c.3.1 Importing the data set\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.3.2-preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.3.2-preparing-the-data",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.3.2 Preparing the data",
    "text": "5c.3.2 Preparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.3.3-transforming-the-data-frame-into-a-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.3.3-transforming-the-data-frame-into-a-matrix",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.3.3 Transforming the data frame into a matrix",
    "text": "5c.3.3 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.4.1-heatmap-of-r-stats",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.4.1-heatmap-of-r-stats",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.4.1 heatmap() of R Stats",
    "text": "5c.4.1 heatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 1, \n                      cexCol = 1,\n                      margins = c(10, 4))\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.1-working-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.1-working-with-heatmaply",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.5.1 Working with heatmaply",
    "text": "5c.5.1 Working with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.2-data-trasformation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.2-data-trasformation",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.5.2 Data trasformation",
    "text": "5c.5.2 Data trasformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n5c.5.2.1 Scaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n5c.5.2.2 Normalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n5c.5.2.3 Percentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.3-clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.3-clustering-algorithm",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.5.3 Clustering algorithm",
    "text": "5c.5.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.4-manual-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.4-manual-approach",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.5.4 Manual approach",
    "text": "5c.5.4 Manual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.5-statistical-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.5-statistical-approach",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.5.5 Statistical approach",
    "text": "5c.5.5 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.6-seriation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.6-seriation",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.5.6 Seriation",
    "text": "5c.5.6 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.7-working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.7-working-with-colour-palettes",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.5.7 Working with colour palettes",
    "text": "5c.5.7 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.8-the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#c.5.8-the-finishing-touch",
    "title": "5c. Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5c.5.8 The finishing touch",
    "text": "5c.5.8 The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "title": "5a. Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.3.1-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.3.1-the-data",
    "title": "5a. Creating Ternary Plot with R",
    "section": "5a.3.1 The data",
    "text": "5a.3.1 The data\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.3.2-importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.3.2-importing-data",
    "title": "5a. Creating Ternary Plot with R",
    "section": "5a.3.2 Importing data",
    "text": "5a.3.2 Importing data\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.3.3-preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.3.3-preparing-the-data",
    "title": "5a. Creating Ternary Plot with R",
    "section": "5a.3.3 Preparing the data",
    "text": "5a.3.3 Preparing the data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.4.1-plotting-a-static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.4.1-plotting-a-static-ternary-diagram",
    "title": "5a. Creating Ternary Plot with R",
    "section": "5a.4.1 Plotting a static ternary diagram",
    "text": "5a.4.1 Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.4.2-plotting-an-interative-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#a.4.2-plotting-an-interative-ternary-diagram",
    "title": "5a. Creating Ternary Plot with R",
    "section": "5a.4.2 Plotting an interative ternary diagram",
    "text": "5a.4.2 Plotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "4c. Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.2.1-installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.2.1-installing-and-loading-the-packages",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.2.1 Installing and loading the packages",
    "text": "4c.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.2.2-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.2.2-data-import",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.2.2 Data import",
    "text": "4c.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.1-plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.1-plotting-standard-error-bars-of-point-estimates",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.3.1 Plotting standard error bars of point estimates",
    "text": "4c.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.2-plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.2-plotting-confidence-interval-of-point-estimates",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.3.2 Plotting confidence interval of point estimates",
    "text": "4c.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.3-visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.3.3-visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "4c.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nShow the code\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.1-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.1-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4c.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.2-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.2-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4c.4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE,\n    .width = c(0.95,0.99)) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.3-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.4.3-visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4c.4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.5-visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#c.5-visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "4c. Visualising Uncertainty",
    "section": "4c.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "4c.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "4a. Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.2.1-installing-and-loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.2.1-installing-and-loading-packages",
    "title": "4a. Visualising Distribution",
    "section": "4a.2.1 Installing and loading packages",
    "text": "4a.2.1 Installing and loading packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.2.2-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.2.2-data-import",
    "title": "4a. Visualising Distribution",
    "section": "4a.2.2 Data import",
    "text": "4a.2.2 Data import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.1-plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.1-plotting-ridgeline-graph-ggridges-method",
    "title": "4a. Visualising Distribution",
    "section": "4a.3.1 Plotting ridgeline graph: ggridges method",
    "text": "4a.3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nShow the Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.2-varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.2-varying-fill-colors-along-the-x-axis",
    "title": "4a. Visualising Distribution",
    "section": "4a.3.2 Varying fill colors along the x axis",
    "text": "4a.3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nShow the Code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.3-mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.3-mapping-the-probabilities-directly-onto-colour",
    "title": "4a. Visualising Distribution",
    "section": "4a.3.3 Mapping the probabilities directly onto colour",
    "text": "4a.3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nShow the Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.4-ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.3.4-ridgeline-plots-with-quantile-lines",
    "title": "4a. Visualising Distribution",
    "section": "4a.3.4 Ridgeline plots with quantile lines",
    "text": "4a.3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\nShow the Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nShow the Code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.1-plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.1-plotting-a-half-eye-graph",
    "title": "4a. Visualising Distribution",
    "section": "4a.4.1 Plotting a Half Eye graph",
    "text": "4a.4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n\nShow the Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.2-adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.2-adding-the-boxplot-with-geom_boxplot",
    "title": "4a. Visualising Distribution",
    "section": "4a.4.2 Adding the boxplot with geom_boxplot()",
    "text": "4a.4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\nShow the Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.3-adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.3-adding-the-dot-plots-with-stat_dots",
    "title": "4a. Visualising Distribution",
    "section": "4a.4.3 Adding the Dot Plots with stat_dots()",
    "text": "4a.4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nShow the Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.4-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#a.4.4-finishing-touch",
    "title": "4a. Visualising Distribution",
    "section": "4a.4.4 Finishing touch",
    "text": "4a.4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\nShow the Code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this chapter, we will be trying out several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nWe use p_load() function from the pacman library to load the required packages\n\npacman::p_load(ggrepel, \n               patchwork, \n               ggthemes, \n               hrbrthemes,\n               tidyverse) \n\n\n\n\nWe will be using a data file called Exam_data. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nGgrepel is able to hide the overlaps pretty well to prevent clutter\n\n\nShow the code\ng231 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS,\n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"With ggrepel\")\n\ng232 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Without ggrepel\")\n\np23 &lt;- g231 + g232\n\np23 + plot_annotation(title = \"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nTrying out various themes from base\n\n\nShow the code\ng241 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"theme_gray\") \n\ng242 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"theme_void\") \n\ng243 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"theme_classic\") \n\ng244 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"theme_minimal\") \n\np241 &lt;- (g241 + g242) / (g243 + g244)\n\np241 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\nTrying out themes from ggthemes\n\n\nShow the code\ng245 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_economist\") +\n  theme_economist()\n\ng246 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_fivethirtyeight\") +\n  theme_fivethirtyeight()\n\ng247 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_hc\") +\n  theme_hc()\n\ng248 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_stata\") +\n  theme_stata()\n\np242 &lt;- (g245 + g246) / (g247 + g248)\n\np242 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\n\nTrying out themes from the hrbthems package\n\n\nShow the code\ng249 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_ft_rc\") +\n  theme_ft_rc()\n\ng2410 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_ipsum\") +\n  theme_ipsum()\n\ng2411 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_modern_rc\") +\n  theme_modern_rc()\n\ng2412 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_tinyhand\") +\n  theme_tinyhand()\n\np243 &lt;- (g249 + g2410) / (g2411 + g2412)\n\np243 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\n\n\nUsing patchwork to combine multiple charts together to tell a complete story\nFirst, let’s create 3 different graphs\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\nNow, lets try to patch them together in various arrangements\n\n\nShow the code\n(p1 + p2) / p3\n\n\n\n\n\nWith inset elements\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this chapter, we will be trying out several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "We use p_load() function from the pacman library to load the required packages\n\npacman::p_load(ggrepel, \n               patchwork, \n               ggthemes, \n               hrbrthemes,\n               tidyverse) \n\n\n\n\nWe will be using a data file called Exam_data. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Ggrepel is able to hide the overlaps pretty well to prevent clutter\n\n\nShow the code\ng231 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS,\n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"With ggrepel\")\n\ng232 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Without ggrepel\")\n\np23 &lt;- g231 + g232\n\np23 + plot_annotation(title = \"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Trying out various themes from base\n\n\nShow the code\ng241 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"theme_gray\") \n\ng242 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"theme_void\") \n\ng243 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"theme_classic\") \n\ng244 &lt;- ggplot(data=exam_data, \n               aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"theme_minimal\") \n\np241 &lt;- (g241 + g242) / (g243 + g244)\n\np241 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\nTrying out themes from ggthemes\n\n\nShow the code\ng245 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_economist\") +\n  theme_economist()\n\ng246 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_fivethirtyeight\") +\n  theme_fivethirtyeight()\n\ng247 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_hc\") +\n  theme_hc()\n\ng248 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_stata\") +\n  theme_stata()\n\np242 &lt;- (g245 + g246) / (g247 + g248)\n\np242 + plot_annotation(title = \"Distribution of Maths score\")\n\n\n\n\n\n\n\n\nTrying out themes from the hrbthems package\n\n\nShow the code\ng249 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_ft_rc\") +\n  theme_ft_rc()\n\ng2410 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_ipsum\") +\n  theme_ipsum()\n\ng2411 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_modern_rc\") +\n  theme_modern_rc()\n\ng2412 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"theme_tinyhand\") +\n  theme_tinyhand()\n\np243 &lt;- (g249 + g2410) / (g2411 + g2412)\n\np243 + plot_annotation(title = \"Distribution of Maths score\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Using patchwork to combine multiple charts together to tell a complete story\nFirst, let’s create 3 different graphs\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\nNow, lets try to patch them together in various arrangements\n\n\nShow the code\n(p1 + p2) / p3\n\n\n\n\n\nWith inset elements\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Here, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nIn the above graph, hovering your mouse above an data point of interest will display the students ID.\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender\", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    # aes tooltip edit here\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:black;\nfont-style:bold; color:white;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css)) \n)                                        \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: lawngreen;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly. Now, it highlights the data points of interest while applying transparency to the others.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: gold;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: springgreen;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Here, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization---ggiraph-methods",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "In the above graph, hovering your mouse above an data point of interest will display the students ID.\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender\", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    # aes tooltip edit here\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:black;\nfont-style:bold; color:white;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css)) \n)                                        \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: lawngreen;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly. Now, it highlights the data points of interest while applying transparency to the others.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: gold;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: springgreen;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "title": "Hands-on_Ex03",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n4.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n4.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "title": "Hands-on_Ex03",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on_Ex03",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "title": "Hands-on_Ex03",
    "section": "4.4 Animated Data Visualisation: plotly",
    "text": "4.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "4b. Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.1-installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.1-installing-and-launching-r-packages",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.1 Installing and launching R packages",
    "text": "4b.3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.2-importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.2-importing-data",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.2 Importing data",
    "text": "4b.3.2 Importing data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.3-one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.3-one-sample-test-gghistostats-method",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.3 One-sample test: gghistostats() method",
    "text": "4b.3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.4-unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.4-unpacking-the-bayes-factor",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.4 Unpacking the Bayes Factor",
    "text": "4b.3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.5-how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.5-how-to-interpret-bayes-factor",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.5 How to interpret Bayes Factor",
    "text": "4b.3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.6-two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.6-two-sample-mean-test-ggbetweenstats",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.6 Two-sample mean test: ggbetweenstats()",
    "text": "4b.3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.7-oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.7-oneway-anova-test-ggbetweenstats-method",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "4b.3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.8-significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.8-significant-test-of-correlation-ggscatterstats",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "4b.3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.9-significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.3.9-significant-test-of-association-depedence-ggbarstats-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "4b.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.1-installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.1-installing-and-loading-the-required-libraries",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.1 Installing and loading the required libraries",
    "text": "4b.5.1 Installing and loading the required libraries\n\npacman::p_load(readxl, performance, parameters, see)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.2-importing-excel-file-readxl-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.2-importing-excel-file-readxl-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.2 Importing Excel file: readxl methods",
    "text": "4b.5.2 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.3-multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.3-multiple-regression-model-using-lm",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.3 Multiple Regression Model using lm()",
    "text": "4b.5.3 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.4-model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.4-model-diagnostic-checking-for-multicolinearity",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.4 Model Diagnostic: checking for multicolinearity",
    "text": "4b.5.4 Model Diagnostic: checking for multicolinearity\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.5-model-diagnostic-checking-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.5-model-diagnostic-checking-normality-assumption",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.5 Model Diagnostic: checking normality assumption",
    "text": "4b.5.5 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.6-model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.6-model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.6 Model Diagnostic: Check model for homogeneity of variances",
    "text": "4b.5.6 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.7-model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.7-model-diagnostic-complete-check",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.7 Model Diagnostic: Complete check",
    "text": "4b.5.7 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.8-visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.8-visualising-regression-parameters-see-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.8 Visualising Regression Parameters: see methods",
    "text": "4b.5.8 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.9-visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#b.5.9-visualising-regression-parameters-ggcoefstats-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4b.5.9 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "4b.5.9 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.1-funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.1-funnelplotr-methods-the-basic-plot",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.4.1 FunnelPlotR methods: The basic plot",
    "text": "4d.4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.2-funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.2-funnelplotr-methods-makeover-1",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.4.2 FunnelPlotR methods: Makeover 1",
    "text": "4d.4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions). xrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.3-funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.4.3-funnelplotr-methods-makeover-2",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.4.3 FunnelPlotR methods: Makeover 2",
    "text": "4d.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.1-computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.1-computing-the-basic-derived-fields",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.5.1 Computing the basic derived fields",
    "text": "4d.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.2-calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.2-calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "4d.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.3-plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.3-plotting-a-static-funnel-plot",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.5.3 Plotting a static funnel plot",
    "text": "4d.5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.4-interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#d.5.4-interactive-funnel-plot-plotly-ggplot2",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "4d.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "4d.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "title": "5b. Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.4.1-building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.4.1-building-a-basic-correlation-matrix",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.4.1 Building a basic correlation matrix",
    "text": "5b.4.1 Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.4.2-drawing-the-lower-or-upper-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.4.2-drawing-the-lower-or-upper-corner",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.4.2 Drawing the lower or upper corner",
    "text": "5b.4.2 Drawing the lower or upper corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.4.3-including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.4.3-including-with-correlation-coefficients",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.4.3 Including with correlation coefficients",
    "text": "5b.4.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.5.1-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.5.1-the-basic-plot",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.5.1 The basic plot",
    "text": "5b.5.1 The basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.1-getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.1-getting-started-with-corrplot",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.7.1 Getting started with corrplot",
    "text": "5b.7.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.2-working-with-visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.2-working-with-visual-geometrics",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.7.2 Working with visual geometrics",
    "text": "5b.7.2 Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"pie\")\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"shade\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.3-working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.3-working-with-layout",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.7.3 Working with layout",
    "text": "5b.7.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"shade\", \n         type=\"lower\")\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"shade\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"shade\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.cex = 0.8)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.4-working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.4-working-with-mixed-layout",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.7.4 Working with mixed layout",
    "text": "5b.7.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.5-combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.5-combining-corrgram-with-the-significant-test",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.7.5 Combining corrgram with the significant test",
    "text": "5b.7.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.6-reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.6-reorder-a-corrgram",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.7.6 Reorder a corrgram",
    "text": "5b.7.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"FPC\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.7-reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#b.7.7-reordering-a-correlation-matrix-using-hclust",
    "title": "5b. Visual Correlation Analysis",
    "section": "5b.7.7 Reordering a correlation matrix using hclust",
    "text": "5b.7.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.1-plotting-a-simple-parallel-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.1-plotting-a-simple-parallel-coordinates",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.4.1 Plotting a simple parallel coordinates",
    "text": "5d.4.1 Plotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.2-plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.2-plotting-a-parallel-coordinates-with-boxplot",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.4.2 Plotting a parallel coordinates with boxplot",
    "text": "5d.4.2 Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.3-parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.3-parallel-coordinates-with-facet",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.4.3 Parallel coordinates with facet",
    "text": "5d.4.3 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.4-rotating-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.4-rotating-x-axis-text-label",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.4.4 Rotating x-axis text label",
    "text": "5d.4.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, size = 5))\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.5-adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.4.5-adjusting-the-rotated-x-axis-text-label",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.4.5 Adjusting the rotated x-axis text label",
    "text": "5d.4.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1, size = 5))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.5.1-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.5.1-the-basic-plot",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.5.1 The basic plot",
    "text": "5d.5.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\n\n\nparallelPlot(wh,\n             width = 320,\n             height = 450)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.5.2-rotate-axis-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.5.2-rotate-axis-label",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.5.2 Rotate axis label",
    "text": "5d.5.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.5.3-changing-the-colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.5.3-changing-the-colour-scheme",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.5.3 Changing the colour scheme",
    "text": "5d.5.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"Plasma\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.5.4-parallel-coordinates-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#d.5.4-parallel-coordinates-plot-with-histogram",
    "title": "5d. Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5d.5.4 Parallel coordinates plot with histogram",
    "text": "5d.5.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "In this exercise, we will be learning to create the following data visualizations using R packages.\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n3.1.1 Importing the data\nFirst, we use the code chunk below to import eventlog.csv file into the R environment and call the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n3.1.2 Examining the Data Structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n3.1.3 Data Preparations\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n3.1.4 Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n3.1.5 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-import",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "4.1 Data Import",
    "text": "4.1 Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparations-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparations-1",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "4.2 Data Preparations",
    "text": "4.2 Data Preparations\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\nThen, the code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-the-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-the-cycle-plot",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "4.3 Plotting the Cycle Plot",
    "text": "4.3 Plotting the Cycle Plot\nFinally, we can use the code chunk below to plot the cycle plot.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-import-1",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "5.1 Data Import",
    "text": "5.1 Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-the-slope-graph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-the-slope-graph",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "5.2 Plotting the Slope Graph",
    "text": "5.2 Plotting the Slope Graph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_ex02",
    "section": "",
    "text": "This exercise aims to critique and improved on the visualizations created by peers from Take Home Exercise 1 based on clarity and aesthetics. For each visualization, I will be listing what had worked well, what did not, and what I think would help make it better. Finally, the visualization will be re-made based on my suggestions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-r-packages",
    "title": "Take-home_ex02",
    "section": "2.1 Loading R packages",
    "text": "2.1 Loading R packages\nWe begin by loading the required R packages.\n\n\nShow the code\npacman::p_load(tidyverse,\n               haven,\n               dplyr,\n               plotly,\n               ggrepel, \n               patchwork, \n               ggthemes, \n               hrbrthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-pisa-data-set",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-pisa-data-set",
    "title": "Take-home_ex02",
    "section": "2.2 Importing PISA data set",
    "text": "2.2 Importing PISA data set\nSimilar to exercise 1, the data we are using can be found from the PISA 2022 Database. The database contains full set of responses from individual students, principals, and parents. In this task, we will only be looking at the students questionnaire data file. In particular, we are only interested in the data of students from Singapore.\n\n\nShow the code\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "title": "Take-home_ex02",
    "section": "2.3 Data wrangling",
    "text": "2.3 Data wrangling\nWe will be using a curated set of variables for our analysis. The variables and their descriptions are listed in the table below.\n\n\n\n\n\n\n\n\nVariable\nDescription\nData Type\n\n\n\n\nCNTSCHID\nThe unique School’s ID\nCategorical\n\n\nCNTSTUID\nThe unique student’s ID\nCategorical\n\n\nMath_Score\nAverage PV scores for Math\nNumerical\n\n\nReading_Score\nAverage PV scores for Reading\nNumerical\n\n\nScience_Score\nAverage PV scores for Science\nNumerical\n\n\nTotal_Score\nOverall average score from the sum of Math, Reading, and Science\nNumerical\n\n\nGender\nMale or Female\nNumerical\n\n\nOwn_Room\nWhether student has his or her own room\nCategorical\n\n\nmi-num\nNumber of musical instruments at student’s home\nNumerical\n\n\n\nThe following code extracts and integrates them in a new data frame.\n\n\nShow the code\n# Create a new dataset PV by extracting relevant variables from stu_qqq_SG\nPV &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    Math_Score = rowMeans(select(., contains(\"PV\")&contains(\"MATH\")), na.rm = TRUE),\n    Reading_Score = rowMeans(select(., contains(\"PV\")&contains(\"READ\")), na.rm = TRUE),\n    Science_Score = rowMeans(select(., contains(\"PV\")&contains(\"SCIE\")), na.rm = TRUE),\n    Total_Score = Math_Score + Reading_Score + Science_Score,\n    Average_Score = Total_Score / 3,\n    Gender = ifelse(ST004D01T == 1,  \"Female\", \"Male\"),\n    Own_Room = ifelse(ST250Q01JA == 1, \"Yes\" , \"No\"),\n    mi_num = ST251Q06JA\n  ) %&gt;%\n  select(CNTSCHID, CNTSTUID, Math_Score, Reading_Score, Science_Score, Total_Score, Average_Score, Gender, Own_Room, mi_num)\n\n\nAnother data set is created for schools. The following code calculates the maths, reading, and science, as well as the average grades in these three subjects for each school’s students.\n\n\nShow the code\nSchool_Avg_Scores &lt;- PV %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math_Score = mean(Math_Score, na.rm = TRUE),\n    Avg_Reading_Score = mean(Reading_Score, na.rm = TRUE),\n    Avg_Science_Score = mean(Science_Score, na.rm = TRUE),\n    Avg_Score = mean(Total_Score/3, na.rm = TRUE)\n  )\n\nSchool_Avg_Scores_long &lt;- School_Avg_Scores %&gt;%\n  select(CNTSCHID, \n         starts_with(\"Avg_Math\"), \n         starts_with(\"Avg_Reading\"), \n         starts_with(\"Avg_Science\"),\n         starts_with(\"Avg_Score\")) %&gt;%\n  pivot_longer(cols = -CNTSCHID, \n               names_to = \"Subject\", \n               values_to = \"Score\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-student-performance",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-student-performance",
    "title": "Take-home_ex02",
    "section": "3.1 Distribution of Student Performance",
    "text": "3.1 Distribution of Student Performance\nThe following code plots histograms of maths, reading, science, and total score scores to observe the distribution of student performance:\n\n\nShow the code\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Reading scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Science scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Total scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot1 + plot2 + plot3 + plot4\n\n\n\n\n\n\n3.1.1 Pros and Cons\nClarity\n\nHistograms are not able to show the distribution of continuous variables well. Instead, a boxplot or density plot would be more suitable.\nAxes limits are not aligned and can be misleading, especially for the charts showing Math, Reading, and Science scores.\nThe plot layout of 2x2 is not ideal. I would use a layout where easy comparison can be made for Math, Reading, and Science.\nOn the same point, I would opt not to show Total Scores as it is on a different scale as compared to the other 3 plots. Rather, I would use Average Scores to give a summary of all 3 scores together.\n\nAesthetics\n\nSoft grid lines are not distracting\nthe “_” in the y-axis label appears unprofessional\nThe colour choice is neat and simple. It is however, too striking for a fill colour. A lighter shade would be more pleasant to the eyes while using striking colours to highlight points of attention.\nThe repetition of “Distribution” in each chart’s title is unnecessary, and can be mentioned once in the plot title instead\n\n\n\n3.1.2 Sketch\n\n\n\n\n\nClarity\n\nChanged the layout with a boxplot that shows Average Scores at the top that gives a summary of all 3 subjects, and a density plot to show the breakdown of these subjects together for easier comparison\nx-axis limits are aligned for both top and bottom charts\nLines have been added to visualize the means of all 3 subjects. Their corresponding points have also been plotted on the boxplot\nAnnotations are added to highlight the mean numbers\n\nAesthetics\n\nSoft grid lines are removed to prevent confusion with the boxplot\nPlot title and axis labels have been replaced to give a clearer picture of what the variables are\nTransparency is added to the fill colour to tone down the glare. Its non-transparent colours are used for the lines, points, and annotation to highlight the points of focus\nbold axis titles for inking effect\n\n\n\n3.1.3 Make-over\n\n\nShow the code\ntemp &lt;- PV[, c(\"CNTSTUID\", \"Math_Score\", \"Reading_Score\", \"Science_Score\")] %&gt;% gather(key = \"Subject\", value = \"Scores\", Math_Score, Reading_Score, Science_Score)\n\np11 &lt;- ggplot(data = temp, aes(x = Scores, fill = Subject)) +\n  geom_density(alpha = 0.3) +\n  xlab(\"Math, Reading, and Science Scores\") +\n  ylab(\"Student\\nDensity\") +\n  xlim(200, 900) + \n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.x = element_text(face = \"bold\"),\n        axis.title.y = element_text(face = \"bold\")) + \n  geom_vline(xintercept = mean(PV$Math_Score),\n             colour = \"red\",\n             linetype = \"dashed\") +\n  geom_vline(xintercept = mean(PV$Reading_Score),\n             colour = \"lawngreen\",\n             linetype = \"dashed\") +\n  geom_vline(xintercept = mean(PV$Science_Score),\n             colour = \"blue\",\n             linetype = \"dashed\") +\n  annotate(\n    geom = \"text\", \n    x = 800, \n    y = 0.004,\n    label = paste0(\"Math Mean: \", round(mean(PV$Math_Score),2)),\n    color = \"red\",\n    fontface = 2,\n    size = 3\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 800, \n    y = 0.003,\n    label = paste0(\"Reading Mean: \", round(mean(PV$Reading_Score),2)),\n    color = \"lawngreen\",\n    fontface = 2,\n    size = 3\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 800, \n    y = 0.0035,\n    label = paste0(\"Science Mean: \", round(mean(PV$Science_Score),2)),\n    color = \"blue\",\n    fontface = 2,\n    size = 3\n  ) +\n  scale_y_continuous(labels = scales::percent)\n\np12 &lt;- ggplot(data = PV, aes(y = Average_Score)) +\n  geom_boxplot(fill = \"lightgray\") +\n  geom_point(aes(x = 0 ,y = mean(Math_Score)),\n             colour = \"red\",\n             size = 2) +\n  geom_point(aes(x = 0 ,y = mean(Reading_Score)),\n             colour = \"lawngreen\",\n             size = 2) +\n  geom_point(aes(x = 0 ,y = mean(Science_Score)),\n             colour = \"blue\",\n             size = 2) +\n  coord_flip() +\n  ylim(200, 900) + \n  xlab(\"Average\\nScores\") +\n  ylab(element_blank()) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        axis.text.y = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\"))\n\np1 &lt;- p12 / p11\n\np1 &lt;- p1 + \n  plot_layout(axes=\"collect\",\n              heights = c(1,5)) + \n  plot_annotation(\n    title = \"Distribution of Students' Scores\"\n  )\n\np1"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-gender",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-gender",
    "title": "Take-home_ex02",
    "section": "3.2 Student Performance by Gender",
    "text": "3.2 Student Performance by Gender\nThe following code generates density plots to compare the distribution of academic performance between students of different genders, providing a comprehensive understanding of the gender differences in academic achievement.\n\n\nShow the code\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\") +  \n   scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Math Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal() +\n  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Reading Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Science Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Total Scores by Gender\") + \n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\ncombined_plots &lt;- plot1 + plot2 + plot3 + plot4 +\n  plot_layout(guides = \"collect\")\n\ncombined_plots\n\n\n\n\n\n\n3.2.1 Pros and Cons\nClarity\n\nAxes limits are not aligned and can be misleading, especially for the charts showing Math, Reading, and Science scores.\nThe plot layout of 2x2 is not ideal. I would use a layout where easy comparison can be made for Math, Reading, and Science.\nSimilarly, I would opt not to show Total Scores as it is on a different scale as compared to the other 3 plots. Rather, I would use Average Scores to give a summary of all 3 scores together.\n\nAesthetics\n\nSoft grid lines are not distracting\nthe “_” in the y-axis label appears unprofessional\nThe colour choice is simple and shows the contrast between the 2 genders clearly\nThe repetition of “Scores by Gender” in each chart’s title is unnecessary, and can be mentioned once in the plot title instead\n\n\n\n3.2.2 Sketch\n\n\n\n\n\nClarity\n\nChanged the layout with a density that shows Average Scores by gender at the top that gives a summary of all 3 subjects, and 3 box plots to show the breakdown of these subjects by gender for easier comparison\nx and y-axis limits are aligned for both top and bottom charts\n\nAesthetics\n\nSoft grid lines are removed to prevent confusion with the boxplot\nPlot title and axis labels have been replaced to give a clearer picture of what the variables are\nTransparency is added to the fill colour to tone down the glare\nBold axis labels and titles\n\n\n\n3.2.3 Make-over\n\n\nShow the code\np21 &lt;- ggplot(data = PV, aes(x = Gender, y = Math_Score, fill = Gender)) +\n  geom_boxplot(alpha = 0.3, show.legend = FALSE) +\n  xlab(\"Math\") +\n  ylab(\"Scores\") +\n  ylim(200, 800) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.x = element_text(face = \"bold\", size = 8),\n        axis.title.y = element_text(face = \"bold\")) +\n  scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"blue\"))\n\np22 &lt;- ggplot(data = PV, aes(x = Gender, y = Reading_Score, fill = Gender)) +\n  geom_boxplot(alpha = 0.3, show.legend = FALSE) +\n  xlab(\"Reading\") +\n  ylab(\"Scores\") +\n  ylim(200, 800) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.x = element_text(face = \"bold\", size = 8),\n        axis.title.y = element_text(face = \"bold\")) +\n  scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"blue\"))\n\np23 &lt;- ggplot(data = PV, aes(x = Gender, y = Science_Score, fill = Gender)) +\n  geom_boxplot(alpha = 0.3, show.legend = FALSE) +\n  xlab(\"Science\") +\n  ylab(\"Scores\") +\n  ylim(200, 800) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.x = element_text(face = \"bold\", size = 8),\n        axis.title.y = element_text(face = \"bold\")) +\n  scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"blue\"))\n\np24 &lt;- ggplot(data = PV, aes(x = Average_Score, fill = Gender)) +\n  geom_density(alpha = 0.3) +\n  labs(title = \"Average Scores\") +\n  xlab(element_blank()) +\n  xlim(200,800) +\n  ylab(\"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"blue\")) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"right\",\n        axis.title.y = element_text(face = \"bold\"))\n\np2 &lt;- p24 / (p21 + p22 + p23 + plot_layout(axes = \"collect\"))\n\np2 &lt;- p2 + plot_layout(guides = \"collect\",\n                       heights = c(1,3)) + \n  plot_annotation(\n    title = \"Distribution of Students' Scores by Gender\"\n  )\n\np2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-school",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-school",
    "title": "Take-home_ex02",
    "section": "3.3 Student Performance by School",
    "text": "3.3 Student Performance by School\nThe following code draws box plots showing the distribution of school average scores in each subject, with text labels identifying the four highest-scoring schools and the two lowest-scoring schools in each subject.\n\n\nShow the code\noutliers_data &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_\"), names_to = \"Subject\", values_to = \"Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Score) %&gt;%\n  slice(c(1:2, (n() - 3):(n())))\n\nggplot(School_Avg_Scores_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_boxplot(fill = \"#3459e6\") +\n  geom_text_repel(data = outliers_data, aes(label = CNTSCHID), \n                  position = position_dodge(width = 1), \n                  box.padding = 0.8, \n                  force = 1, \n                  segment.color = \"grey50\", \n                  size = 2) +  # Use ggrepel's geom_text_repel\n  labs(title = \"Boxplot of Average Scores for Each Subject\", x = \"\", y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n3.3.1 Pros and Cons\nClarity\n\nLack of y-axis label\nannotations are cluttered and difficult to read. It seems like the intention was to highlight the best and worst performing schools for Avg_Score, as well as their position on Math, Reading, and Science respectively. In this case, I would only single out one school for best and one school for worst, and use a different colour to highlight their position on each boxplot.\n\nAesthetics\n\nSoft grid lines are not distracting\nthe “_” in the y-axis label appears unprofessional\nThe colour choice is neat and simple\n\n\n\n3.3.2 Sketch\n\n\n\n\n\nClarity\n\nAdded y-axis label “Average Scores”\nRemove annotations for all but the Top and Bottom School. I also only included the school ID only on the boxplot for “Average of three subjects”, while highlighting their respective position for each of the different subjects using coloured points. Added a legend for the coloured points as well.\n\nAesthetics\n\nRemoved the grid lines as there are already axis ticks.\nTidied up the x-axis text. Removed the “_” and “Avg_Score” as these are now shown in the y-axis title.\nReplaced the fill with lightgray. This helps to provide contrast with the coloured points of the Top and Bottom Schools.\nBold axis labels and titles\n\n\n\n3.3.3 Make-over\n\n\nShow the code\ntop&lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_Score\"), \n               names_to = \"Subject\", \n               values_to = \"Avg_Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Avg_Score) %&gt;%\n  slice(c((n()):(n()))) %&gt;% \n  gather(key = \"Subject\", \n         value = \"Score\", \n         Avg_Math_Score, \n         Avg_Reading_Score, \n         Avg_Science_Score, \n         Avg_Score)\n\nbottom &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_Score\"), \n               names_to = \"Subject\", \n               values_to = \"Avg_Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Avg_Score) %&gt;%\n  slice(c(1:1)) %&gt;% \n  gather(key = \"Subject\", \n         value = \"Score\", \n         Avg_Math_Score,\n         Avg_Reading_Score, \n         Avg_Science_Score, \n         Avg_Score)\n\nggplot(School_Avg_Scores_long,\n       aes(x = Subject,\n           y = Score, \n           fill = Subject)) +\n  geom_boxplot(fill = \"lightgray\") +\n  geom_point(data = top, \n             aes(x = Subject, \n                 y = Score, \n                 color = \"Top School\")) +\n  geom_text_repel(data = top[grepl('Avg_Score', top$Subject),],\n                  aes(label = CNTSCHID), \n                  box.padding = 0.8,\n                  nudge_x = 0.7,\n                  nudge_y = 40,\n                  force = 1, \n                  color = \"blue\",\n                  size = 3) +\n  geom_point(data = bottom, \n             aes(x = Subject, \n                 y = Score, \n                 color = \"Bottom School\")) +\n  geom_text_repel(data = bottom[grepl('Avg_Score', bottom$Subject),],\n                  aes(label = CNTSCHID), \n                  box.padding = 0.8,\n                  nudge_x = 0.7,\n                  nudge_y = -40,\n                  force = 1, \n                  color = \"red\",\n                  size = 3) +\n  labs(title = \"Boxplot of Average Scores for Each Subject\", \n       x = \"\", \n       y = \"Average Scores\") +\n  scale_x_discrete(labels=c(\"Avg_Math_Score\" = \"Math\",\n                            \"Avg_Reading_Score\" = \"Reading\",\n                            \"Avg_Science_Score\" = \"Science\",\n                            \"Avg_Score\" = \"Average of\\n three Subjects\")) +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5,\n                                  face = \"bold\"),\n        axis.title.y = element_text(face = \"bold\",\n                                    size = 8),\n        axis.text.x = element_text(face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.title = element_blank()) + \n  scale_colour_manual(values = c(\"Top School\" = \"blue\",\n                                 \"Bottom School\" = \"red\")) +\n  guides(color=guide_legend(\"colour\", reverse = TRUE), fill = \"none\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-musical-instrument",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-musical-instrument",
    "title": "Take-home_ex02",
    "section": "3.4 Student Performance by Musical Instrument",
    "text": "3.4 Student Performance by Musical Instrument\nThe following code shows scatter plots of students’ maths, reading, science and overall performance against the number of musical instruments owned, as well as showing the relationship by fitting a line through linear regression.\n\n\nShow the code\nplot_math &lt;- ggplot(data=PV, aes(x=mi_num, y=Math_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Math Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_reading &lt;- ggplot(data=PV, aes(x=mi_num, y=Reading_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Reading Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_science &lt;- ggplot(data=PV, aes(x=mi_num, y=Science_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Science Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_total &lt;- ggplot(data=PV, aes(x=mi_num, y=Total_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Total Score by Musical instruments\", x = \"\", y = \"\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot &lt;- plot_math + plot_reading + plot_science + plot_total\ncombined_plot\n\n\n\n\n\n\n3.4.1 Pros and Cons\nClarity\n\nLack of x and y axis labels\nAxis limits are not aligned, making it difficult to make comparisons\nChoice of scatter plot is not suitable for discrete vs continuous data. It does not clearly show the distribution of grades and number of students at each x-axis tick.\nThe geom_smooth line makes little sense due to the nature of how the scatter points look like. (we can’t really tell that the line is going through the mean and giving an upward trend)\n\nAesthetics\n\nSoft grid lines are not distracting\nThe colour choice is neat and simple\nThe repetition of “by Musical Instruments” in each chart’s title is unnecessary, and can be mentioned in the plot title instead\n\n\n\n3.4.2 Sketch\n\n\n\n\n\nClarity\n\nAdded x and y labels\nAligned all axis limits so that they are of the same scale\nChanged the layout and replaced the scatter plot with a geom_bin_2d that shows Average Scores on the left that gives a summary of all 3 subjects. The bin map also indicates the total number of students with 1, 2, 3 or 4 instruments unlike the previous scatter plot.\nBoxplots are used to show breakdown for individual subjects.\nThe geom_smooth line is removed as the trend can already be observed from the plots.\n\nAesthetics\n\nSoft grid lines are removed as it is not needed.\nThe colour choice is reduced to a simple gray and red scale to avoid distractions.\nAxis titles are collected to avoid repetitions.\nBold axis labels and titles.\n\n\n\n3.4.3 Make-over\n\n\nShow the code\np41 &lt;- ggplot(data=na.omit(PV), \n              aes(x = as.factor(mi_num), \n                  y = Math_Score)) +\n  geom_boxplot(fill = \"lightgray\") +\n  ylim(200,800) +\n  labs(title = element_blank(), \n       x = element_blank(),\n       y = \"Math\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\")\n        )\n\np42 &lt;- ggplot(data=na.omit(PV), \n              aes(x = as.factor(mi_num), \n                  y = Reading_Score)) +\n  geom_boxplot(fill = \"lightgray\") +\n  ylim(200,800) +\n  labs(title = element_blank(), \n       x = element_blank(),\n       y = \"Reading\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\")\n        )\n\np43 &lt;- ggplot(data=na.omit(PV), \n              aes(x = as.factor(mi_num), \n                  y = Science_Score)) +\n  geom_boxplot(fill = \"lightgray\") +\n  ylim(200,800) +\n  labs(title = element_blank(), \n       x = element_blank(),\n       y = \"Science\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\")\n        )\n\n\np44 &lt;- ggplot(data=na.omit(PV), \n              aes(x=as.factor(mi_num), \n                  y=Average_Score)) +\n  ylim(200,800) + \n  geom_bin_2d(bins = 12) +\n  scale_fill_continuous(low = \"seashell\", \n                        high = \"red\") +\n  labs(title = element_blank(), \n       x = element_blank(), \n       y = \"Average of three Subjects\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        legend.position = \"left\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title.y = element_text(face = \"bold\")\n        )\n\n\np4 &lt;- p44 + (p41 / p42 / p43 + plot_layout(axis_titles = \"collect\"))\n\np4 &lt;- p4 + \n  plot_layout(axis_titles = \"collect\",\n              widths = c(4,6)) + \n  plot_annotation(\n    title = \"Distribution of Students' Scores by Number of Musical Instruments\\nin household\",\n  )\n\np4 &lt;- p4 & theme(plot.margin = margin(5.5, 5.5, 0, 5.5))\n\nwrap_elements(panel = p4) +\n  labs(tag = \"Number of Musical Intruments\") +\n  theme(\n    plot.tag = element_text(size = rel(0.8), \n                            face = \"bold\"),\n    plot.tag.position = \"bottom\"\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-own-room",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#student-performance-by-own-room",
    "title": "Take-home_ex02",
    "section": "3.5 Student Performance by Own Room",
    "text": "3.5 Student Performance by Own Room\nThe following code plots box-and-line graphs to compare student performance in maths, reading, science and overall scores by whether or not they had the room to themselves.\n\n\nShow the code\np1 &lt;- ggplot(data = PV, aes(x =Math_Score , y = Own_Room)) +\n        geom_boxplot(fill = \"#3459e6\") +\n        labs(title =\"Math Score by Private Space\",x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\np2 &lt;- ggplot(data = PV, aes(x =Reading_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n     \n        labs(title =\"Reading Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n  \np3 &lt;- ggplot(data = PV, aes(x = Science_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n       \n        labs(title =\"Science Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))  \n\np4 &lt;- ggplot(data = PV, aes(x = Total_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n       \n        labs(title =\"Total Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot&lt;- p1 + p2 + p3 + p4\ncombined_plot\n\n\n\n\n\n\n3.5.1 Pros and Cons\nClarity\n\nLack of axis labels\nAxes limits are not aligned and can be misleading, especially for the charts showing Math, Reading, and Science scores.\nThe plot layout of 2x2 is not ideal. I would use a layout where easy comparison can be made for Math, Reading, and Science.\nOn the same point, I would opt not to show Total Scores as it is on a different scale as compared to the other 3 plots. Rather, I would use Average Scores to give a summary of all 3 scores together.\nData for NA should not be shown as it does not add value to the analysis\n\nAesthetics\n\nSoft grid lines are not distracting\n“Score by Private Space” is repeated in all charts’ titles. Instead, it can be mentioned only once in the plot title\nThe colour is same for all responses. I would use separate colours for yes and no responses.\n\n\n\n3.5.2 Sketch\n\n\n\n\n\nClarity\n\nAdded x and y labels\nAligned all axis limits so that they are of the same scale\nChanged the layout and replaced the Total Score boxplot with a Density plot which shows Average Scores on the left that gives a summary of all 3 subjects.\nBoxplots are used to show breakdown for individual subjects.\nNA responses are removed as it does not add to the analysis\n\nAesthetics\n\nSoft grid lines are removed as it is not needed.\nFill colour by response is added\nAxis are collected to avoid repetitions.\nBold axis labels and titles.\n\n\n\n3.5.3 Make-over\n\n\nShow the code\np51 &lt;- ggplot(data = na.omit(PV), \n              aes(x = Own_Room, \n                  y = Math_Score,\n                  fill = Own_Room)) +\n  geom_boxplot(alpha = 0.3, \n               show.legend = FALSE) +\n  ylim(200, 800) +\n  labs(title =\"Math\",\n       x = \"\", \n       y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_fill_manual(values = c(\"Yes\" = \"blue\",\n                               \"No\" = \"red\"))\n\np52 &lt;- ggplot(data = na.omit(PV), \n              aes(x = Own_Room, \n                  y = Reading_Score,\n                  fill = Own_Room)) +\n  geom_boxplot(alpha = 0.3, \n               show.legend = FALSE) +\n  ylim(200, 800) +\n  labs(title =\"Reading\",\n       x = \"\", \n       y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_fill_manual(values = c(\"Yes\" = \"blue\",\n                               \"No\" = \"red\"))\n\np53 &lt;- ggplot(data = na.omit(PV), \n              aes(x = Own_Room, \n                  y = Science_Score,\n                  fill = Own_Room)) +\n  geom_boxplot(alpha = 0.3, \n               show.legend = FALSE) +\n  ylim(200, 800) +\n  labs(title =\"Science\",\n       x = \"\", \n       y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_fill_manual(values = c(\"Yes\" = \"blue\",\n                               \"No\" = \"red\"))\n\np54 &lt;- ggplot(data = na.omit(PV), \n              aes(y = Average_Score , \n                  fill = Own_Room)) + \n  geom_density(alpha = 0.3) +\n  ylim(200, 800) +\n  labs(title =\"Average of three\\nSubjects\", \n       x = \"\",\n       y = \"Score\") +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.position = \"left\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.y = element_text(face = \"bold\"),\n        axis.text.y = element_blank()) +\n  scale_x_reverse() +\n  scale_fill_manual(values = c(\"Yes\" = \"blue\",\n                               \"No\" = \"red\")) + \n  guides(fill = guide_legend(title=\"Own Room\"))\n\n\np5 &lt;- p54 + (p51 + p52 + p53 + plot_layout(axes = \"collect\"))\n\np5 + plot_layout(widths = c(1,5)) + \n  plot_annotation(title = \"Distribution of Students' Scores by Private Space\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#data-import",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#data-import",
    "title": "Horizon Plot",
    "section": "Data Import",
    "text": "Data Import\nFor this hands-on exercise, Average Retail Prices Of Selected Consumer Items will be used. In addition, we use the mutate function to format the date column in the correct Date type format instead of character type.\n\naverp &lt;- read_csv(\"data/AVERP.csv\") %&gt;% \n  mutate(`Date` = dmy(`Date`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html",
    "title": "7a. Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we will learn how to plot functional and truthful choropleth maps by using an R package called tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#the-data",
    "title": "7a. Choropleth Mapping with R",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-geospatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-geospatial-data-into-r",
    "title": "7a. Choropleth Mapping with R",
    "section": "3.2 Importing Geospatial Data into R",
    "text": "3.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\colinjkl\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-attribute-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-attribute-data-into-r",
    "title": "7a. Choropleth Mapping with R",
    "section": "3.3 Importing Attribute Data into R",
    "text": "3.3 Importing Attribute Data into R\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#data-preparation",
    "title": "7a. Choropleth Mapping with R",
    "section": "3.4 Data Preparation",
    "text": "3.4 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n3.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "7a. Choropleth Mapping with R",
    "section": "4.1 Plotting a choropleth map quickly by using qtm()",
    "text": "4.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "7a. Choropleth Mapping with R",
    "section": "4.2 Creating a choropleth map by using tmap’s elements",
    "text": "4.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n4.2.3 Drawing a choropleth map using tm_fill() and *tm_border()\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#data-classification-methods-of-tmap",
    "title": "7a. Choropleth Mapping with R",
    "section": "4.3 Data classification methods of tmap",
    "text": "4.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n4.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n4.3.1.1 DIY Classification methods\nAs mentioned above there are many different styles of classification which we can use. More details can be found in their documentations.\nThe “kmeans” style uses kmeans to generate the breaks.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe “hclust” style uses hclust to generate the breaks using hierarchical clustering.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe “fisher” style uses the algorithm proposed by W. D. Fisher (1958) and discussed by Slocum et al. (2005) as the Fisher-Jenks algorithm; added here thanks to Hisaji Ono. This style will subsample by default for more than 3000 observations. This style should always be preferred to “jenks” as it uses the original Fortran code and runs nested for-loops much faster.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nKmeans, hclust, and fisher methods are very similar in results. Kmeans groups seems to be more fragmented, while hclust and fisher methods have groups that are mostly packed together, side by side.\n\n\n4.3.1.2 DIY Classification number of classes\nWe can also tweak the number of classes that we want to classify. Let’s take a look at various results using the fisher method.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWhile 2 classes is too little, 20 classes is too much making it difficult to observe the differences. Somewhere between 6 to 10 classes would be ideal.\n\n\n\n4.3.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#colour-scheme",
    "title": "7a. Choropleth Mapping with R",
    "section": "4.4 Colour Scheme",
    "text": "4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n4.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#map-layouts",
    "title": "7a. Choropleth Mapping with R",
    "section": "4.5 Map Layouts",
    "text": "4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n4.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n4.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#drawing-small-multiple-choropleth-maps",
    "title": "7a. Choropleth Mapping with R",
    "section": "4.6 Drawing Small Multiple Choropleth Maps",
    "text": "4.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "7a. Choropleth Mapping with R",
    "section": "4.7 Mappping Spatial Object Meeting a Selection Criterion",
    "text": "4.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Climate Forecast in Singapore",
    "section": "",
    "text": "short intro here"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#loading-libraries",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#loading-libraries",
    "title": "Climate Forecast in Singapore",
    "section": "2.1 Loading libraries",
    "text": "2.1 Loading libraries\nIn this exercise, we will be requiring the following libraries.\n\npacman::p_load(\n  ggplot2,\n  ggthemes,\n  tidyverse,\n  data.table,\n  zoo,\n  ggfortify,\n  reshape,\n  MLmetrics,\n  plotly,\n  patchwork,\n  ggiraph\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-import",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-import",
    "title": "Climate Forecast in Singapore",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nFor this exercise, we will be using the climate data sets from the Meteorological Service Singapore.\n\n2.2.1 Climate data\nHistorical daily climate records can be downloaded directly from this page in the Meteorological Service Singapore web page.\nHowever, there are several things to note about this data set:\n\nThere are a total of 63 weather stations in Singapore, out of which, only 18 of them keeps records of rainfall, temperature, and wind speed. The other 41 only has rainfall records. As such, we will only look at the 18 stations with all records for consistency.\nThe oldest data dates back to 1980, but only in a few stations. In fact, from 2009, manual observations were gradually replaced by automated meteorological instruments.\n\nOn the more technical side of things, the data can only be downloaded for 1 weather station for 1 month at a time. If we were to download the data for the last 20 years manually, it would take 20years * 12months * 18stations = 4,320 iterations of downloads by hand. To tackle this task efficiently, a script is written to download the data automatically from the url provided.\nThis can be done simply by using the data.table::fread function with the url. For example, the code chunk below shows 1 iteration of download for Changi weather station for the month of January in 2024.\n\ndata.table::fread(\"http://www.weather.gov.sg/files/dailydata/DAILYDATA_S24_202401.csv\")\n\nNow, we want to write a for loop to iterate over all 18 stations. Each station is identified by a unique key value represented in the following list.\n\n\nShow code\nstations = c(\n  \"paya lebar\" = \"06\",\n  \"tengah\" = \"23\",\n  \"changi\" = \"24\",\n  \"seletar\" = \"25\",\n  \"tai seng\" = \"43\",\n  \"jurong west\" = \"44\",\n  \"ang mo kio\" = \"109\",\n  \"clementi\" = \"50\",\n  \"admiralty\" = \"104\",\n  \"sentosa\" = \"60\",\n  \"pulau ubin\" = \"106\",\n  \"east coast parkway\" = \"107\",\n  \"marina barrage\" = \"108\",\n  \"newton\" = \"111\",\n  \"tuas south\" = \"115\",\n  \"pasir panjang\" = \"116\",\n  \"jurong island\" = \"117\",\n  \"choa chu kang south\" = \"121\"\n)\n\n\nWe also want to iterate over the years and month number in the url. For now, we will download the last 20 years of data.\nAnother issue that we encountered was that some of the column names changed at certain years either due to a different spelling or symbol. There is also many white spaces in the name, which could make coding more tedious later on. As such, I opted to change all the column names to simpler short forms with underscore as the separator instead of space.\nThe code chunk below shows the list of old to new column names. A function is also written for the renaming task, to rename the columns as we download the data sets 1 by 1. This helps with the data.table::rbindlist used in the loop as all the column names needs to be the same as the data set before.\n\n\nShow code\ncol_names = c(\n  \"Station\" = \"Station\",\n  \"Year\" = \"Year\",\n  \"Month\" = \"Month\",\n  \"Daily Rainfall Total (mm)\" = \"daily_rainfall\",\n  \"Highest 30 Min Rainfall (mm)\" = \"highest_30m_rainfall\",\n  \"Highest 30 min Rainfall (mm)\" = \"highest_30m_rainfall\",\n  \"Highest 60 Min Rainfall (mm)\" = \"highest_60m_rainfall\",\n  \"Highest 60 min Rainfall (mm)\" = \"highest_60m_rainfall\",\n  \"Highest 120 Min Rainfall (mm)\" = \"highest_120m_rainfall\",\n  \"Highest 120 min Rainfall (mm)\" = \"highest_120m_rainfall\",\n  \"Mean Temperature (°C)\" = \"mean_temp\",\n  \"Mean Temperature (°C)\" = \"mean_temp\",\n  \"Mean Temperature (Â°C)\" = \"mean_temp\",\n  \"Maximum Temperature (°C)\" = \"max_temp\",\n  \"Maximum Temperature (°C)\" = \"max_temp\",\n  \"Maximum Temperature (Â°C)\" = \"max_temp\",\n  \"Minimum Temperature (°C)\" = \"min_temp\",\n  \"Minimum Temperature (°C)\" = \"min_temp\",\n  \"Minimum Temperature (Â°C)\" = \"min_temp\",\n  \"Mean Wind Speed (km/h)\" = \"mean_wind\",\n  \"Max Wind Speed (km/h)\" = \"max_wind\"\n)\n\nclean_names &lt;- function(df, col_names) {\n\n  for (n in names(col_names)) {\n    names(df)[names(df) == n] &lt;- col_names[[n]]\n  }\n  \n  return (df)\n}\n\n\nFinally, we can write our loop. The full code is shown below.\n\n\nShow code\npad_zero &lt;- function(num) {\n  if (num &lt; 10) {\n    return (paste0(\"0\", as.character(num)))\n  } else {\n    return (as.character(num))\n  }\n}\n\ndf &lt;- data.table()\n\nfor (station in stations) {\n  for (y in 3:23) {\n    for (m in 1:12) {\n      year &lt;- pad_zero(y)\n      month &lt;- pad_zero(m)\n      tryCatch(\n        {\n          joining_df &lt;- data.table::fread(paste0(\n          \"http://www.weather.gov.sg/files/dailydata/DAILYDATA_S\",\n          station,\n          \"_20\",\n          year,\n          month,\n          \".csv\"),\n          encoding = \"Latin-1\")\n          \n          joining_df &lt;- clean_names(joining_df, col_names)\n          \n          df &lt;- rbindlist(list(df, joining_df), use.names=TRUE, fill=TRUE)\n        }, error = function(e) {\n          print(e)\n        }\n      )\n    }\n  }\n}\n\n\nAfter downloading, we save the data in a csv file with the data.table::fwrite function.\n\nfwrite(df, \"data/clean_climate_data.csv\")\n\n\n\n2.2.2 Weather Station data\nThe coordinates of each weather station can be found here. Due to the small number, I have manually collated them in a csv file and saved it.\n\n\n2.2.3 Load data\nAssuming we had already saved off the data previously, we will now load the data sets using the data.table::fread function.\n\nclimate &lt;- data.table::fread(\"data/clean_climate_data.csv\", encoding=\"Latin-1\") %&gt;% as.data.frame()\n\n\n\n\n\n\n\nTip\n\n\n\nWe will need to use encoding = “Latin-1” here to identify some of the symbols present in the data set. Otherwise, the data set will be unreadable."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html",
    "title": "7b. Visualising Geospatial Point Data",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#the-data",
    "title": "7b. Visualising Geospatial Point Data",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#data-import-and-preparation",
    "title": "7b. Visualising Geospatial Point Data",
    "section": "3.2 Data Import and Preparation",
    "text": "3.2 Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "7b. Visualising Geospatial Point Data",
    "section": "3.3 Creating a sf data frame from an aspatial data frame",
    "text": "3.3 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "7b. Visualising Geospatial Point Data",
    "section": "4.1 It all started with an interactive point symbol map",
    "text": "4.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#lets-make-it-proportional",
    "title": "7b. Visualising Geospatial Point Data",
    "section": "4.2 Lets make it proportional",
    "text": "4.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#lets-give-it-a-different-colour",
    "title": "7b. Visualising Geospatial Point Data",
    "section": "4.3 Lets give it a different colour",
    "text": "4.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#i-have-a-twin-brothers",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#i-have-a-twin-brothers",
    "title": "7b. Visualising Geospatial Point Data",
    "section": "4.4 I have a twin brothers :)",
    "text": "4.4 I have a twin brothers :)\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html",
    "title": "7c. Analytical Mapping",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#installing-and-loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#installing-and-loading-packages",
    "title": "7c. Analytical Mapping",
    "section": "2.1 Installing and loading packages",
    "text": "2.1 Installing and loading packages\n\npacman::p_load(tmap, tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#importing-data",
    "title": "7c. Analytical Mapping",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#visualising-distribution-of-non-functional-water-point",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#visualising-distribution-of-non-functional-water-point",
    "title": "7c. Analytical Mapping",
    "section": "3.1 Visualising distribution of non-functional water point",
    "text": "3.1 Visualising distribution of non-functional water point\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#remove-unwanted-characters",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#remove-unwanted-characters",
    "title": "Climate Forecast in Singapore",
    "section": "3.1 Remove unwanted characters",
    "text": "3.1 Remove unwanted characters\nThere are many observations with special symbol “—”. This is different from the usual dash “-” that we normally find on our keyboards. To avoid errors, we will change all of them to 0s.\n\n# lapply gsub function\nclimate &lt;- data.frame(lapply(climate, function(x) gsub(\"—\", 0, x)), stringsAsFactors=F)\n\n\n\n\n\n\n\nTip\n\n\n\nlapply refers to list apply. You can think of a data.frame object as a list of columns. lapply iterates through that list, and applies the function to each column one by one."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-type",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-type",
    "title": "Climate Forecast in Singapore",
    "section": "3.2 Data type",
    "text": "3.2 Data type\nNext, we want to ensure that all columns are in their correct data type. For Station, Year, Month, and Day, we want them to be factors. The rest should be numerical.\nFor those values that were coerced as NA, we will convert them to 0 as well.\n\n# Change factor data's type to factor\nclimate[c(\"Station\", \"Year\", \"Month\", \"Day\")] &lt;- lapply(climate[c(\"Station\", \"Year\", \"Month\", \"Day\")] , factor)\n\n# Change non-factor data to numeric\nclimate[!names(climate) %in% c(\"Station\", \"Year\", \"Month\", \"Day\")] &lt;- lapply(climate[!names(climate) %in% c(\"Station\", \"Year\", \"Month\", \"Day\")] , as.numeric)\n\n# NA introduced by coercion will be changed back to 0\nclimate[is.na(climate)] &lt;- 0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#date-column",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#date-column",
    "title": "Climate Forecast in Singapore",
    "section": "3.3 Date column",
    "text": "3.3 Date column\nWe also want a date column for easier sorting in chronological order. To do that, we can use the zoo::as.Date function.\n\n# Create date column\nclimate$date &lt;- as.Date(with(climate, paste(Year, Month, Day,sep=\"-\")), \"%Y-%m-%d\")\n\n# Sort by date\nclimate &lt;- climate[order(climate$date), ]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#daily-mean-temperature-rainfall-and-wind",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#daily-mean-temperature-rainfall-and-wind",
    "title": "Climate Forecast in Singapore",
    "section": "3.4 Daily Mean Temperature, Rainfall, and Wind",
    "text": "3.4 Daily Mean Temperature, Rainfall, and Wind\nLet us explore how the mean temperature, rainfall, and wind looks like in the past 20 years.\nThe code chunk below plots the daily mean temperature over the last 20 years for each weather station. Similar code was used to plot the chart for rainfall and temperature as well.\n\nTemperatureRainfallWind\n\n\n\n\nShow code\nggplot() + \n  geom_line(data = climate, aes(x=date, y=mean_temp, colour=Station)) + \n  facet_wrap(~Station) + \n  ggtitle(\"Daily Mean Temperature in last 20 years\")\n\n\n\n\n\n\n\n\n\nShow code\nggplot() + \n  geom_line(data = climate, aes(x=date, y=daily_rainfall, colour=Station)) + \n  facet_wrap(~Station) +\n  ggtitle(\"Daily rainfall in the last 20 years\")\n\n\n\n\n\n\n\n\n\nShow code\nggplot() + \n  geom_line(data = climate, aes(x=date, y=mean_wind, colour=Station)) + \n  facet_wrap(~Station) +\n  ggtitle(\"Daily mean wind speed in the last 20 years\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nThe start date of each weather station varies. This should be taken into account when fitting the model, as well as in the date range selection in the Shiny App.\nThere are many periods within the time series where the data is missing, especially so in temperature and wind. To deal with this, we can take the mean value of that month from other years as a filler value. For example, if jan 2010 is missing, we can use the mean value from jan 2003-2009, and 2011-2023 to fill the gap.\nDaily rainfall has many 0 values, representing days without rain. This however, makes it difficult to model a time series. Thus, dates will be rolled up to monthly levels and we will analyse mean monthly values instead. To be consistent, we will use monthly levels for temperature and wind data as well.\n\n\n\n\n\n\n\n\n\nNon-Captured v.s Missing data\n\n\n\n\nNon-captured data refers to the missing data before the date when the weather station started collecting that data. We do not want to modify non-captured data.\nMissing data refers to the data after the start date that is captured but missing for whatever reasons. We want to fill these gaps with appropriate estimation techniques."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#remove-incomplete-stations",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#remove-incomplete-stations",
    "title": "Climate and Dengue in Singapore",
    "section": "4.1 Remove incomplete stations",
    "text": "4.1 Remove incomplete stations\nAs observed above, these stations have data that ended earlier than december 2023, and thus will be removed from the time series analysis.\n\nprint(\"temp\")\n\n[1] \"temp\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#roll-up-to-monthly-levels",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#roll-up-to-monthly-levels",
    "title": "Climate Forecast in Singapore",
    "section": "4.1 Roll up to Monthly levels",
    "text": "4.1 Roll up to Monthly levels\nWhat we want to do now is to group the data by month and aggregate them using their monthly mean. However, there may be many instances of 0s (missing data) within each month which will pull down the monthly average temperature or wind. Therefore, a function is written to calculate the non-zero mean value instead. However, this is not needed for rainfall as 0s would mean days with no rain.\n\n# Function to find non-zero mean from a dateframe column\nnon_zero_mean &lt;- function(x) {\n  y &lt;- mean(x[x!=0])\n  return (y)\n}\n\nNext, we use the dplyr::group_by and dplyr::summarise functions to calculate the monthly average for all variables. We also re-create the date column as a function of year and month using zoo::as.yearmon.\n\n# Apply non-zero means to monthly temp and wind variables\n# Apply mean to monthly rain variables\nmonthly_climate &lt;- climate %&gt;% \n  group_by(Station, Year, Month) %&gt;% \n  summarise(mean_temp = non_zero_mean(mean_temp),\n            max_temp = non_zero_mean(max_temp),\n            min_temp = non_zero_mean(min_temp),\n            mean_wind = non_zero_mean(mean_wind),\n            max_wind = non_zero_mean(max_wind),\n            mean_rain = mean(daily_rainfall),\n            mean_30m_rain = mean(highest_30m_rainfall),\n            mean_60m_rain = mean(highest_60m_rainfall),\n            mean_120m_rain = mean(highest_120m_rainfall),\n            date = min(date))\n\n# Format date column as yearmon format\nmonthly_climate$date &lt;- as.yearmon(monthly_climate$date)\n\n# Change any NAs to 0\nmonthly_climate[is.na(monthly_climate)] &lt;- 0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#filling-zeros-with-non-zero-means",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#filling-zeros-with-non-zero-means",
    "title": "Climate and Dengue in Singapore",
    "section": "4.3 Filling zeros with non-zero means",
    "text": "4.3 Filling zeros with non-zero means\nThis task requires several steps which is performed by the code chunk below.\nFirst, we want to iterate through all relevant temperature and wind variables.\nNext, for each variable, we look at all the stations data.\nThen, for each station, we find the months where all data is missing or 0.\nLastly, for each of these months, we replace the NA or 0 with the non-zero mean of the same month in other years for that station. For example, if Changi station jan 2010 is missing, then we will replace the value with the non-zero mean from Changi station jan 2003-2009, and 2011-2023.\n\nreplace_zero &lt;- function(df, s, y, m, col) {\n  df[df$Station == s &\n       df$Year == y &\n       df$Month == m, col][[1]] &lt;- non_zero_mean(df[df$Station == s & df$Month == m, col])\n  \n  return (df)\n}\n\ncolumns = c(\"mean_temp\", \"max_temp\", \"min_temp\", \"mean_wind\", \"max_wind\")\n\nfor (c in columns) {\n  for (s in levels(monthly_climate$Station)) {\n    for (y in levels(monthly_climate$Year)) {\n      for (m in levels(monthly_climate$Month)) {\n        \n        value &lt;- monthly_climate[monthly_climate$Station == s &\n                                   monthly_climate$Year == y &\n                                   monthly_climate$Month == m, c][[1]]\n        \n        if (length(value) == 0) {\n          monthly_climate &lt;- replace_zero(monthly_climate, s, y, m, c)\n        } else if (value == 0) {\n          monthly_climate &lt;- replace_zero(monthly_climate, s, y, m, c)\n        }\n      }\n    }\n  }\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#final-look-at-data",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#final-look-at-data",
    "title": "Climate Forecast in Singapore",
    "section": "4.3 Final look at data",
    "text": "4.3 Final look at data\nLet us chart the same variables once more and check if all values are fine now.\n\nTemperatureRainfallWind\n\n\n\n\nShow code\nggplot() + \n  geom_line(data = filled_monthly_climate, aes(x=date, y=mean_temp, colour=Station)) + \n  facet_wrap(~Station) + \n  ggtitle(\"Monthly Mean Temperature in last 20 years\")\n\n\n\n\n\n\n\n\n\nShow code\nggplot() + \n  geom_line(data = filled_monthly_climate, aes(x=date, y=mean_rain, colour=Station)) + \n  facet_wrap(~Station) +\n  ggtitle(\"Monthly rainfall in the last 20 years\")\n\n\n\n\n\n\n\n\n\nShow code\nggplot() + \n  geom_line(data = filled_monthly_climate, aes(x=date, y=mean_wind, colour=Station)) + \n  facet_wrap(~Station) +\n  ggtitle(\"Monthly mean wind speed in the last 20 years\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#input-variables",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#input-variables",
    "title": "Climate and Dengue in Singapore",
    "section": "5.1 Input variables",
    "text": "5.1 Input variables\nThis section determines the variable selection done by the user of the Shiny Application. It is split into 2 phases.\nPhase 1\n\nUser selects weather station and climate variable using drop-down list.\nThe code will filter out the selected weather station and climate variable, and obtain the earliest start date available.\n\n\n# User Input\ntarget_station &lt;- \"Paya Lebar\"\ntarget_variable &lt;- \"mean_temp\"\n\n\n# Filter out target data from monthly_climate\ntarget &lt;- filled_monthly_climate[\n  filled_monthly_climate$Station == target_station, \n  c(\"Station\", \"Year\", \"Month\", \"date\", target_variable)\n]\n\n# Convert NAs back to zero for sorting and cumsum\ntarget[is.na(target)] &lt;- 0\ntarget &lt;- target[order(target$date), ]\n\n# Finding earliest start date using cumulative sum\ntarget$cumulative_sum &lt;- cumsum(target[target_variable])\n\ntarget &lt;- target[target$cumulative_sum &gt; 0, ]\n\ny &lt;- dplyr::first(target[order(target$date), \"Year\"])[[1]] %&gt;% \n  as.character() %&gt;% \n  as.numeric()\nm &lt;- dplyr::first(target[order(target$date), \"Month\"])[[1]] %&gt;% \n  as.character() %&gt;% \n  as.numeric()\n\nprint(paste0(\"Earliest start date: \", as.character(y), \"-\", as.character(m)))\n\n[1] \"Earliest start date: 2017-9\"\n\n\nPhase 2\n\nUser selects the start and end date using a slider (slider start date defined in step 2, end date is always Dec 2023), as well as training to test set ratio.\nThe code will slice the data according to the defined dates.\n\n\n# User Input\ntarget_date_start &lt;- \"2018-3\"\ntarget_date_end &lt;- \"2023-12\"\ntrain_test_split &lt;- 0.8\n\n\n# Filter out defined time period\ntarget &lt;- target[target$date &gt;= target_date_start, ]\ntarget &lt;- target[target$date &lt;= target_date_end, ]\n\n# Find row number when training ends and validation starts\nsplit_train_end &lt;- round(train_test_split*nrow(target)) - 1\nsplit_val_start &lt;- round(train_test_split*nrow(target))\n\n# Check if there is no test, ie: train_test_split == 1 \n# if (target_date_end == target$date[split_val_start])\nif (train_test_split == 1) {\n  validation = FALSE\n} else {\n  validation = TRUE\n}\n\n# Create time series object\ntrain_ts &lt;- ts(target[target_variable], \n               frequency = 12,\n               start = c(\n                 strsplit(target_date_start, \"-\")[[1]][1],\n                 strsplit(target_date_end, \"-\")[[1]][2]\n               ),\n               end = c(\n                 as.numeric(year(target$date[split_train_end])),\n                 as.numeric(month(target$date[split_train_end]))\n               ))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-fitting",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-fitting",
    "title": "Climate and Dengue in Singapore",
    "section": "5.2 Model Fitting",
    "text": "5.2 Model Fitting\nIn this section, we will use the inputs provided by the user to define the data that we will be using to fit the Holt Winters model.\n\nHW &lt;- HoltWinters(train_ts)\n\nresult_df &lt;- target[,c(\"date\",target_variable)]\n\n\nif (validation) {\n  \n  val_period &lt;- nrow(target) - split_val_start\n  \n  validation_preds &lt;- predict(HW,\n                              n.ahead = val_period)\n  \n  result_df$fit &lt;- NA\n  result_df$fit[13:(nrow(result_df)-val_period)] &lt;- as.data.frame(HW$fitted)$xhat\n  \n  result_df$val &lt;- NA\n  result_df$val[(nrow(result_df)-val_period+1):nrow(result_df)] &lt;- validation_preds\n\n} else {\n  \n  result_df$fit &lt;- NA\n  result_df$fit[13:nrow(result_df)] &lt;- as.data.frame(HW$fitted)$xhat\n  \n}\n\n\ng &lt;- ggplot(data = result_df) + \n  geom_line(aes(x=date, y=.data[[target_variable]]), linewidth=1) +\n  geom_line(aes(x=date, y=fit), color=\"darkturquoise\", linewidth=1)\n\nif (validation) {\n  g &lt;- g + geom_line(aes(x=date, y=val), color=\"coral\", linewidth=1)\n}\n\ng &lt;- g + \n  ggtitle(\"Actual vs Predicted\") +\n  xlab(\"Date\") +\n  ylab(str_to_title(gsub(\"_\", \" \", target_variable)))\n\ng\n\n\n\n\n\n# data.frame(result_df[1], stack(result_df[2:ncol(result_df)]))\n\n\ncomponents_dfts &lt;- decompose(train_ts)\nplot(components_dfts)\n\n\n\n\n\ncomponents_dfts$seasonal %&gt;% data.frame()\n\n             .\n1   0.35069739\n2   0.51637874\n3   0.78184546\n4   0.10795081\n5   0.15214565\n6   0.39058651\n7  -0.04180193\n8   0.15336817\n9  -0.38469650\n10 -0.76866902\n11 -0.91787452\n12 -0.33993077\n13  0.35069739\n14  0.51637874\n15  0.78184546\n16  0.10795081\n17  0.15214565\n18  0.39058651\n19 -0.04180193\n20  0.15336817\n21 -0.38469650\n22 -0.76866902\n23 -0.91787452\n24 -0.33993077\n25  0.35069739\n26  0.51637874\n27  0.78184546\n28  0.10795081\n29  0.15214565\n30  0.39058651\n31 -0.04180193\n32  0.15336817\n33 -0.38469650\n34 -0.76866902\n35 -0.91787452\n36 -0.33993077\n37  0.35069739\n38  0.51637874\n39  0.78184546\n40  0.10795081\n41  0.15214565\n42  0.39058651\n43 -0.04180193\n44  0.15336817\n45 -0.38469650\n46 -0.76866902\n\n\n\nmape &lt;- MAPE(validation_preds, validation) * 100\n\nprint(mape)\n\n[1] 2770.858"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-tuning",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-tuning",
    "title": "Climate Forecast in Singapore",
    "section": "5.2 Model Tuning",
    "text": "5.2 Model Tuning\nNow users can decide to change certain model parameters to tune the model. Tuning the model will re-generate all the plots and metrics with the new parameters.\n\n# User Input\ntarget_date_start &lt;- \"2018-3\"\ntarget_date_end &lt;- \"2023-12\"\ntrain_test_split &lt;- 0.8 # floating value between 0.5 and 1\nalpha &lt;- HW$alpha # floating value between 0 and 1 \nbeta &lt;- HW$beta # floating value between 0 and 1 \ngamma &lt;- HW$gamma # floating value between 0 and 1 \nseasonal &lt;- \"additive\" # or \"multiplicative\"\n\nThe code here is mostly the same as the one above, but now with the addition of the parameters.\n\n\nShow code\n# Filter out defined time period\ntarget &lt;- target[target$date &gt;= target_date_start, ]\ntarget &lt;- target[target$date &lt;= target_date_end, ]\n\n# Find row number when training ends and validation starts\nsplit_train_end &lt;- round(train_test_split*nrow(target)) - 1\nsplit_val_start &lt;- round(train_test_split*nrow(target))\n\n# Check if there is no test, ie: train_test_split == 1 \n# if (target_date_end == target$date[split_val_start])\nif (train_test_split == 1) {\n  validation = FALSE\n} else {\n  validation = TRUE\n}\n\n# Create time series object, but now with target start and end date\ntrain_ts &lt;- ts(target[target_variable], \n               frequency = 12,\n               start = c(\n                 strsplit(target_date_start, \"-\")[[1]][1],\n                 strsplit(target_date_start, \"-\")[[1]][2]\n               ),\n               end = c(\n                 as.numeric(year(target$date[split_train_end])),\n                 as.numeric(month(target$date[split_train_end]))\n               ))\n\n# Fit model\nHW &lt;- HoltWinters(train_ts,\n                  alpha = alpha,\n                  beta = beta,\n                  gamma = gamma,\n                  seasonal = seasonal)\n\n# Create results data frame\nresult_df &lt;- target[,c(\"date\",target_variable)]\n\n# Store results in data frame\n# If there is no validation results, no need to store\nif (validation) {\n  \n  val_period &lt;- nrow(target) - split_val_start\n  \n  validation_preds &lt;- predict(HW,\n                              n.ahead = val_period)\n  \n  result_df$fit &lt;- NA\n  result_df$fit[13:(nrow(result_df)-val_period)] &lt;- as.data.frame(HW$fitted)$xhat\n  \n  result_df$val &lt;- NA\n  result_df$val[(nrow(result_df)-val_period+1):nrow(result_df)] &lt;- validation_preds\n\n} else {\n  \n  result_df$fit &lt;- NA\n  result_df$fit[13:nrow(result_df)] &lt;- as.data.frame(HW$fitted)$xhat\n  \n}\n\n\nAfter which, the same plots and metrics will be generated from the tuned model which is shown above."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-forecast",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-forecast",
    "title": "Climate Forecast in Singapore",
    "section": "5.3 Model Forecast",
    "text": "5.3 Model Forecast\nLastly, once parameters are confirmed, we can proceed to make predictions and plot them.\n\n# User Input\nn.ahead = 24\nCI = 0.95\n\nThe code chunk below prepares the data needed for the plot.\n\n\nShow code\n# Referenced from\n# https://www.r-bloggers.com/2012/07/holt-winters-forecast-using-ggplot2/\n\n# Create target time series object without validation\ntarget_ts &lt;- ts(target[target_variable], \n                frequency = 12,\n                start = c(\n                  strsplit(target_date_start, \"-\")[[1]][1],\n                  strsplit(target_date_start, \"-\")[[1]][2]\n                ),\n                end = c(\n                  strsplit(target_date_end, \"-\")[[1]][1],\n                  strsplit(target_date_end, \"-\")[[1]][2]\n                ))\n\n# Fit Holt Winters model\nHW_fc &lt;- HoltWinters(target_ts,\n                     alpha = alpha,\n                     beta = beta,\n                     gamma = gamma,\n                     seasonal = seasonal)\n\n# Predict \nforecast &lt;- predict(HW_fc,  \n                    n.ahead = n.ahead,  \n                    prediction.interval = T,  \n                    level = CI)\n\n# Store results in data frame\ndf &lt;- as.data.frame(forecast)\n\n# Separate out forecasted values and confidence interval deviation\n# Convert date to Y-m format\nfor_values &lt;- data.frame(time = time(forecast),  \n                         value_forecast = df$fit,  \n                         dev = df$upr - df$fit)\nfor_values$time &lt;- as.yearmon(round_date(date_decimal(as.numeric(for_values$time)), unit = \"month\"))\n\n# Store fitted values in separate data frame\n# Convert date to Y-m format\nfitted_values &lt;- data.frame(time = time(HW_fc$fitted),\n                            fitted = as.data.frame(HW_fc$fitted)$xhat)\nfitted_values$time &lt;-as.yearmon(round_date(date_decimal(as.numeric(fitted_values$time)), unit = \"month\"))\n\n# Store actual values in separate data frame\n# Convert date to Y-m format\nactual_values &lt;- data.frame(time = time(HW_fc$x),\n                            Actual = c(HW_fc$x))\nactual_values$time &lt;- as.yearmon(round_date(date_decimal(as.numeric(actual_values$time)), unit = \"month\"))\n\n# Merge all 3 frames into one data frame \ngraphset &lt;- merge(actual_values,  fitted_values,  by='time',  all=TRUE)\ngraphset &lt;- merge(graphset,  for_values,  all=TRUE,  by='time')\ngraphset[is.na(graphset$dev),  ]$dev &lt;- 0\n\n# Create new column combining fitted and forecast\ngraphset$Fitted &lt;- c(rep(NA,  NROW(graphset) - (NROW(for_values) + NROW(fitted_values))),  fitted_values$fitted,  for_values$value_forecast)\n\n# Stack data frame into long format\ngraphset.melt &lt;- melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')\n\n# Preparing tooltips\ngraphset.melt$tt &lt;- c(paste0(\n  ifelse(graphset.melt$variable == \"Actual\", \"Actual: \", \"Fitted: \"),\n  round(graphset.melt$value,2)\n))\n\n\nNow we can plot the forecast values with confidence interval.\n\n\nShow code\n# Plot interactive\nf &lt;- ggplot(graphset.melt,  \n            aes(x=time,  y=value)) + \n  geom_ribbon(data=graphset, \n              aes(x=time, \n                  y=Fitted, \n                  ymin=Fitted-dev,  \n                  ymax=Fitted + dev),  \n              alpha=.2,  \n              fill='green') + \n  geom_line_interactive(aes(colour=variable,\n                            data_id=variable), \n            linewidth=1) + \n  geom_point_interactive(aes(colour=variable,\n                             data_id=variable,\n                             tooltip=tt),\n                         size = 0.3) +\n  geom_vline(xintercept=max(actual_values$time),  \n             lty=2) + \n  xlab('Date') + \n  ylab(str_to_title(gsub(\"_\", \" \", target_variable))) + \n  ggtitle(paste0(\"Holt Winter's Forecast for \", \n                 str_to_title(gsub(\"_\", \" \", target_variable)))) +\n  theme(legend.position='bottom') + \n  scale_colour_hue('')\n\ngirafe(code = print(f), \n       width_svg = 6, \n       height_svg = 6 * 0.618,\n       options = list(                        \n         opts_hover(css = \"color: none;\"),  \n         opts_hover_inv(css = \"opacity:0.2;\") \n       ))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-tbl_graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-tbl_graph-object",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.1 The tbl_graph object",
    "text": "4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-dplyr-verbs-in-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-dplyr-verbs-in-tidygraph",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.2 The dplyr verbs in tidygraph",
    "text": "4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.3 Using tbl_graph() to build tidygraph data model.",
    "text": "4.3 Using tbl_graph() to build tidygraph data model.\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.4 Reviewing the output tidygraph’s graph object",
    "text": "4.4 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#reviewing-the-output-tidygraphs-graph-object-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#reviewing-the-output-tidygraphs-graph-object-1",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.5 Reviewing the output tidygraph’s graph object",
    "text": "4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#changing-the-active-object",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#changing-the-active-object",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.6 Changing the active object",
    "text": "4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example:\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#plotting-a-basic-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#plotting-a-basic-network-graph",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.1 Plotting a basic network graph",
    "text": "5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#changing-the-default-network-graph-theme",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#changing-the-default-network-graph-theme",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.2 Changing the default network graph theme",
    "text": "5.2 Changing the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#changing-the-coloring-of-the-plot",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#changing-the-coloring-of-the-plot",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3 Changing the coloring of the plot",
    "text": "5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-ggraphs-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-ggraphs-layouts",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4 Working with ggraph’s layouts",
    "text": "5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#fruchterman-and-reingold-layout",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#fruchterman-and-reingold-layout",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5 Fruchterman and Reingold layout",
    "text": "5.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#modifying-network-nodes",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#modifying-network-nodes",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6 Modifying network nodes",
    "text": "5.6 Modifying network nodes\nIn this section, you will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#modifying-edges",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#modifying-edges",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.7 Modifying edges",
    "text": "5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-facet_edges",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-facet_edges",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "6.1 Working with facet_edges()",
    "text": "6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-facet_edges-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-facet_edges-1",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "6.2 Working with facet_edges()",
    "text": "6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#a-framed-facet-graph",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#a-framed-facet-graph",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "6.3 A framed facet graph",
    "text": "6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-facet_nodes",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-facet_nodes",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "6.4 Working with facet_nodes()",
    "text": "6.4 Working with facet_nodes()\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#computing-centrality-indices",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#computing-centrality-indices",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "7.1 Computing centrality indices",
    "text": "7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-network-metrics",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-network-metrics",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "7.2 Visualising network metrics",
    "text": "7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-community",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-community",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "7.3 Visualising Community",
    "text": "7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-preparation",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.1 Data preparation",
    "text": "8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#plotting-the-first-interactive-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#plotting-the-first-interactive-network-graph",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.2 Plotting the first interactive network graph",
    "text": "8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-layout",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.3 Working with layout",
    "text": "8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-visual-attributes---nodes",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-visual-attributes---nodes",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.4 Working with visual attributes - Nodes",
    "text": "8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-visual-attributes---edges",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#working-with-visual-attributes---edges",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.5 Working with visual attributes - Edges",
    "text": "8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#interactivity",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.6 Interactivity",
    "text": "8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visOption’s argument."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-class Exercise 7",
    "section": "",
    "text": "pacman::p_load(\n  sf,\n  terra,\n  gstat,\n  tmap,\n  viridis,\n  tidyverse\n)\n\n\nrfstations &lt;- read_csv(\"data/aspatial/RainfallStation.csv\")\n\n\nrfdata &lt;- read_csv(\"data/aspatial/DAILYDATA_202402.csv\") %&gt;%\n  select(c(1, 5)) %&gt;%\n  group_by(Station) %&gt;% \n  summarise(MONTHSUM = sum(`Daily Rainfall Total (mm)`)) %&gt;% \n  ungroup()\n\n\nrfdata &lt;- rfdata %&gt;% \n  left_join(rfstations)\n\n\nrfdata_sf &lt;- st_as_sf(rfdata,\n                      coords = c(\"Longitude\",\n                                 \"Latitude\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nmpsz2019 &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\colinjkl\\ISSS608-VAA\\In-class_Ex\\In-class_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(mpsz2019) +\n  tm_borders() +\n  tm_shape(rfdata_sf) +\n  tm_dots(col = 'MONTHSUM')\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\ngrid &lt;- terra::rast(mpsz2019,\n                    nrows = 690,\n                    ncols = 1075)\n\nxy &lt;- terra::xyFromCell(grid,\n                        1:ncell(grid))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex07/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#filling-missing-data-with-non-zero-means",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#filling-missing-data-with-non-zero-means",
    "title": "Climate Forecast in Singapore",
    "section": "4.2 Filling missing data with non-zero means",
    "text": "4.2 Filling missing data with non-zero means\nAt this point, we note that even after aggregating to a monthly level, there are still missing values. This is probably because the entire month of data was missing, and taking the non-zero mean of that month would result in NAs that are later converted to 0. Therefore, we will fill these months with estimated values as described below.\nThis task requires several steps which is performed by the code chunk below.\n\nIterate through all relevant temperature and wind variables.\nFor each variable, iterate through all the stations.\nFor each station, find the months where all data is missing.\nLastly, for each of these months, we replace the NA or 0 with the non-zero mean of the same month in other years for that station. For example, if Changi station jan 2010 is missing, then we will replace the value with the non-zero mean from Changi station jan 2003-2009, and 2011-2023.\n\n\n\nShow code\n# Function to replace missing data with non-zero mean\nreplace_zero &lt;- function(df, s, y, m, col) {\n  df[df$Station == s &\n       df$Year == y &\n       df$Month == m, col][[1]] &lt;- non_zero_mean(df[df$Station == s & df$Month == m, col])\n  \n  return (df)\n}\n\n# Define temp and wind variables in list\ncolumns = c(\"mean_temp\", \"max_temp\", \"min_temp\", \"mean_wind\", \"max_wind\")\n\n# Create results data frame as a copy of monthly_climate\n# We will fill in the new non-zero values \nfilled_monthly_climate &lt;- monthly_climate\n\n\n# Loop to find missing data\nfor (c in columns) {\n  for (s in levels(monthly_climate$Station)) {\n    \n    # Isolate data for station and climate variable\n    temp &lt;- monthly_climate[monthly_climate$Station == s, \n                            c(\"Station\", \"Year\", \"Month\", \"date\", c)]\n    \n    # Sort by date\n    temp &lt;- temp[order(temp$date), ]\n    \n    # Get cumulative sum to find start date\n    temp$cum_sum &lt;- cumsum(temp[c])\n    \n    # Loop years and months to find missing months\n    for (y in levels(temp$Year)) {\n      for (m in levels(temp$Month)) {\n        \n        # Extract value and cumulative sum\n        value &lt;- temp[temp$Year == y &\n                      temp$Month == m, c][[1]]\n        \n        cum_sum &lt;- temp[temp$Year == y &\n                      temp$Month == m, \"cum_sum\"][[1]]\n        \n        # If value is numeric(0), next\n        # This usually occurs for rows with non-captured data\n        if (length(value) == 0) next\n        \n        # If value == 0 and is after start date (cumulative sum &gt; 0)\n        # Replace zero with non-zero means\n        if (value == 0 & cum_sum &gt; 0) {\n          temp &lt;- replace_zero(temp, s, y, m, c)\n        }\n        \n        # If value is before start date, replace 0 with NA\n        # This will prevent ggplot from plotting a 0 value for \n        # data points before the start date\n        if (cum_sum == 0) {\n          temp[\n            temp$Year == y &\n              temp$Month == m,\n            c\n          ] &lt;- NaN\n        }\n        \n        # Extract filled value from temp\n        new_value &lt;- temp[temp$Year == y &\n                      temp$Month == m, c][[1]]\n        \n        # Assign to results data frame\n        filled_monthly_climate[\n          filled_monthly_climate$Station == s &\n            filled_monthly_climate$Year == y &\n            filled_monthly_climate$Month == m,\n          c\n        ] &lt;- new_value\n      }\n    }\n  }\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#user-input",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#user-input",
    "title": "Climate and Dengue in Singapore",
    "section": "6.1 User input",
    "text": "6.1 User input\nThe user starts by selecting the weather station and climate variable of interest. These are selected from a pre-defined drop down list."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#time-frame-and-validation",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#time-frame-and-validation",
    "title": "Climate and Dengue in Singapore",
    "section": "6.2 Time frame and validation",
    "text": "6.2 Time frame and validation\nAfter the step in 6.1, the user will be prompted to select the time period as well as train test split.\nThe time period is selected using a slider. The start and end date of the slider is specific to the weather station and climate variable chosen earlier.\nThe train test split is a floating number between 0.5 and 1."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-fit",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-fit",
    "title": "Climate and Dengue in Singapore",
    "section": "6.3 Model Fit",
    "text": "6.3 Model Fit\nNext, the user will click the “Fit Model” button. This will trigger a couple of events.\nFirstly, this fits a Holts Winter model over the filtered data set based on the selected variables in 6.1 and 6.2. In addition, predictions will be made for the validation period with the fitted model.\nSecondly, left panel 3 and 4 will be revealed to the user. I will elaborate on these 2 panels in the following sections.\nThe main screen’s first tab will now display a Actual vs Predicted plot. Predicted lines for training period and validation period will be in different colours.\nThe second tab will show a plot of the decomposed elements of the model, namely:\n\nObserved\nTrend\nSeason\nRandom\n\nAt the bottom of the screen, the training and validation MAPE and MAE will be shown in 4 separate boxes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-tuning-1",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-tuning-1",
    "title": "Climate Forecast in Singapore",
    "section": "6.2 Model Tuning",
    "text": "6.2 Model Tuning\nAfter the step in 6.1, several panels will be populated.\n\nModel tuning panel\nModel forecast panel\nActual vs Predicted plot\nDecomposed plot\nModel Metric boxes\n\n\n\n6.2.1 Model parameters\nThe model parameters consists of time period, train test split percentage, as well as other Holt Winters parameters.\n\nThe time period is selected using a slider. The start and end date of the slider is specific to the weather station and climate variable chosen earlier.\nThe train test split is a floating number between 0.5 and 1.\nThe Holt Winters parameters will be initially populated with the value that was calculated by the model.\n\nUsers can change these values as they like, and click the Tune button to re-generate the results.\n\n\n6.2.2 Plots\nThere are 2 plots that will be generated, namely Actual vs Predicted and Decomposed plots. Decomposed plot will be revealed when the user switches to the Decomposed tab above.\n\n\n\n6.2.3 Metrics\nAt the bottom of the screen, the training and validation MAPE and MAE will be shown in 4 separate boxes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-forecast-1",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-forecast-1",
    "title": "Climate Forecast in Singapore",
    "section": "6.3 Model Forecast",
    "text": "6.3 Model Forecast\nOnce the user is satisfied with the tuning, he or she can fill in the desired forecast periods and confidence interval in the Model Forecast panel and click the “Forecast” button to generate the forecast results.\n\nThis will populate the Forecast panel on the right."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-initialization",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-initialization",
    "title": "Climate Forecast in Singapore",
    "section": "5.1 Model Initialization",
    "text": "5.1 Model Initialization\nThis section describes the model initialization.\nFirstly, user selects weather station and climate variable using drop-down list.\n\n# User Input\ntarget_station &lt;- \"Paya Lebar\"\ntarget_variable &lt;- \"mean_temp\"\n\nThen, the code will filter out the selected weather station and climate variable, and obtain the earliest start date available.\n\n\nShow code\n# Filter out target data from monthly_climate\ntarget &lt;- filled_monthly_climate[\n  filled_monthly_climate$Station == target_station, \n  c(\"Station\", \"Year\", \"Month\", \"date\", target_variable)\n]\n\n# Convert NAs back to zero for sorting and cumsum\ntarget[is.na(target)] &lt;- 0\ntarget &lt;- target[order(target$date), ]\n\n# Finding earliest start date using cumulative sum\ntarget$cumulative_sum &lt;- cumsum(target[target_variable])\n\ntarget &lt;- target[target$cumulative_sum &gt; 0, ]\n\ny &lt;- dplyr::first(target[order(target$date), \"Year\"])[[1]] %&gt;% \n  as.character() %&gt;% \n  as.numeric()\nm &lt;- dplyr::first(target[order(target$date), \"Month\"])[[1]] %&gt;% \n  as.character() %&gt;% \n  as.numeric()\n\nprint(paste0(\"Earliest start date: \", as.character(y), \"-\", as.character(m)))\n\n\n[1] \"Earliest start date: 2017-9\"\n\n\nNext, the code will fit the Holt Winters model based on default parameters\n\nFull time period available for the selected weather station and climate variable\nDefault train test split of 0.8\nDefault Holt Winters parameters which is automatically calculated by the model\n\n\n\nShow code\n# Default values\ntrain_test_split &lt;- 0.8\n\n# Find row number when training ends and validation starts\nsplit_train_end &lt;- round(train_test_split*nrow(target)) - 1\nsplit_val_start &lt;- round(train_test_split*nrow(target))\n\n# Check if there is no test, ie: train_test_split == 1 \n# if (target_date_end == target$date[split_val_start])\nif (train_test_split == 1) {\n  validation = FALSE\n  split_train_end &lt;- split_val_start\n} else {\n  validation = TRUE\n}\n\n# Create time series object\ntrain_ts &lt;- ts(target[target_variable], \n               frequency = 12,\n               start = c(\n                 y,\n                 m\n               ),\n               end = c(\n                 as.numeric(year(target$date[split_train_end])),\n                 as.numeric(month(target$date[split_train_end]))\n               ))\n\n# Fit model\nHW &lt;- HoltWinters(train_ts)\n\n# Create results data frame\nobserved_df &lt;- target[,c(\"date\",target_variable)]\nobserved_df$type &lt;- \"Observed\"\ncolnames(observed_df)[2] &lt;- \"value\"\n\n# Store results in data frame\n# If there is no validation results, no need to store\nif (validation) {\n  \n  val_period &lt;- nrow(target) - split_val_start + 1\n  \n  validation_preds &lt;- predict(HW,\n                              n.ahead = val_period)\n  \n  fit_df &lt;- data.frame(\n    date = observed_df$date[13:(nrow(observed_df)-val_period)],\n    value = as.data.frame(HW$fitted)$xhat,\n    type = \"Fitted\"\n  )\n  \n  val_df &lt;- data.frame(\n    date = observed_df$date[(nrow(observed_df)-val_period+1):nrow(observed_df)],\n    value = as.data.frame(validation_preds)$fit,\n    type = \"Validation\"\n  )\n  \n  results_df &lt;- rbind.data.frame(observed_df, fit_df, val_df)  \n\n} else {\n  \n  val_period &lt;- 0\n  \n  fit_df &lt;- data.frame(\n    date = observed_df$date[13:(nrow(observed_df)-val_period)],\n    value = as.data.frame(HW$fitted)$xhat,\n    type = \"Fitted\"\n  )\n  \n  results_df &lt;- rbind.data.frame(observed_df, fit_df)\n  \n}\n\n# Prepare tooltips\nresults_df$tt &lt;- c(paste0(\n  \"Date: \", results_df$date, \n  \"\\nValue: \", round(results_df$value,0),\n  \"\\nType: \", results_df$type\n))\n\n\nLastly, several plots and metrics will be generated from the default model\nActual vs Predicted\n\n\nShow code\n# Plot observed and fitted line\ng &lt;- ggplot(data = results_df, \n            aes(x=date,\n                y=value,\n                colour=type)) + \n  geom_line_interactive(\n    aes(data_id = date),\n    linewidth=0.5\n  ) + \n  geom_point_interactive(\n    aes(data_id = date,\n        tooltip = tt),\n    size = 0\n  )\n\n# Edit scales\ng &lt;- g + \n  scale_color_manual(values=c('Observed' = 'black',\n                              \"Fitted\" = 'darkturquoise',\n                              \"Validation\" = 'coral'))\n  \n\n# Add plot layouts\ng &lt;- g + \n  ggtitle(\"Actual vs Predicted\") +\n  xlab(\"Date\") +\n  ylab(str_to_title(gsub(\"_\", \" \", target_variable)))\n\n\ngirafe(                                  \n  ggobj = g,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"r: 2pt; stroke: white;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  ))  \n\n\n\n\n\n\nDecomposed\n\n\nShow code\n# Store decomposed elements in data frame\ncomponents_dfts &lt;- decompose(train_ts)\ndecomp_df &lt;- data.frame(Date = observed_df$date[1:(nrow(observed_df)-val_period)],\n                        Observed = components_dfts$x,\n                        Trend = components_dfts$trend,\n                        Seasonal = components_dfts$seasonal,\n                        Random = components_dfts$random)\n\n# Prepare interactive plots for patchwork\nd1 &lt;- ggplot(data = decomp_df) +\n  geom_line(aes(x=Date, y=Observed)) +\n  geom_point_interactive(aes(x=Date, \n                             y=Observed, \n                             data_id=Date, \n                             tooltip=paste0(\"Date: \", Date, \n                                            \"\\nObserved: \", round(Observed,1),\n                                            \"\\nTrend: \", round(Trend,1),\n                                            \"\\nSeasonal: \", round(Seasonal,1),\n                                            \"\\nRandom: \", round(Random,1))), \n                         size=0.2)\n  \n\nd2 &lt;- ggplot(data = decomp_df) +\n  geom_line(aes(x=Date, y=Trend)) +\n  geom_point_interactive(aes(x=Date, \n                             y=Trend, \n                             data_id=Date, \n                             tooltip=paste0(\"Date: \", Date, \n                                            \"\\nObserved: \", round(Observed,1),\n                                            \"\\nTrend: \", round(Trend,1),\n                                            \"\\nSeasonal: \", round(Seasonal,1),\n                                            \"\\nRandom: \", round(Random,1))), \n                         size=0.2) \n  \n\nd3 &lt;- ggplot(data = decomp_df) + \n  geom_line(aes(x=Date, y=Seasonal)) +\n  geom_point_interactive(aes(x=Date, \n                             y=Seasonal, \n                             data_id=Date, \n                             tooltip=paste0(\"Date: \", Date, \n                                            \"\\nObserved: \", round(Observed,1),\n                                            \"\\nTrend: \", round(Trend,1),\n                                            \"\\nSeasonal: \", round(Seasonal,1),\n                                            \"\\nRandom: \", round(Random,1))),\n                         size=0.2)\n\nd4 &lt;- ggplot(data = decomp_df) + \n  geom_line(aes(x=Date, y=Random)) +\n  geom_point_interactive(aes(x=Date, \n                             y=Random, \n                             data_id=Date, \n                             tooltip=paste0(\"Date: \", Date, \n                                            \"\\nObserved: \", round(Observed,1),\n                                            \"\\nTrend: \", round(Trend,1),\n                                            \"\\nSeasonal: \", round(Seasonal,1),\n                                            \"\\nRandom: \", round(Random,1))), \n                         size=0.2)\n\nd &lt;- d1 / d2 / d3 / d4 + \n  plot_layout(axes = \"collect\") + \n  plot_annotation('Decomposition of Time Series')\n\ngirafe(code = print(d), \n       width_svg = 6, \n       height_svg = 6 * 0.618,\n       options = list(                        \n         opts_hover(css = \"fill: red; r: 2pt; stroke: white;\"),  \n         opts_hover_inv(css = \"opacity:0.2;\") \n       ) )\n\n\n\n\n\n\nMetrics\n\n\nShow code\n# Calculate training MAPE and MAE\ntrain_MAPE &lt;- round(MAPE(observed_df$value[13:(nrow(observed_df)-val_period)],\n                         fit_df$value) * 100, \n                    2)\ntrain_MAE &lt;- round(MAE(observed_df$value[13:(nrow(observed_df)-val_period)],\n                                         fit_df$value), \n                   2)\n\n# Calculate validation MAPE and MAE\nval_MAPE &lt;- round(MAPE(observed_df$value[(nrow(observed_df)-val_period+1):nrow(observed_df)], \n                       val_df$value) * 100, \n                  2)\nval_MAE &lt;- round(MAE(observed_df$value[(nrow(observed_df)-val_period+1):nrow(observed_df)], \n                     val_df$val), \n                 2)\n\nprint(paste0(\"Training MAPE: \", train_MAPE, \"%\"))\n\n\n[1] \"Training MAPE: 1.43%\"\n\n\nShow code\nprint(paste0(\"Training MAE: \", train_MAE))\n\n\n[1] \"Training MAE: 0.41\"\n\n\nShow code\nprint(paste0(\"Validation MAPE: \", val_MAPE, \"%\"))\n\n\n[1] \"Validation MAPE: 2.04%\"\n\n\nShow code\nprint(paste0(\"Validation MAE: \", val_MAE))\n\n\n[1] \"Validation MAE: 0.57\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-initialization-1",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#model-initialization-1",
    "title": "Climate Forecast in Singapore",
    "section": "6.1 Model initialization",
    "text": "6.1 Model initialization\nThe user starts by selecting the weather station and climate variable of interest. These are selected from a pre-defined drop down list.\nOnce initialized, a Holt Winters model is fitted based on selected weather station, climate variable, and other default parameters."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#the-tbl_graph-object",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#the-tbl_graph-object",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.1 The tbl_graph object",
    "text": "4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#the-dplyr-verbs-in-tidygraph",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#the-dplyr-verbs-in-tidygraph",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.2 The dplyr verbs in tidygraph",
    "text": "4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.3 Using tbl_graph() to build tidygraph data model.",
    "text": "4.3 Using tbl_graph() to build tidygraph data model.\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.4 Reviewing the output tidygraph’s graph object",
    "text": "4.4 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#reviewing-the-output-tidygraphs-graph-object-1",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#reviewing-the-output-tidygraphs-graph-object-1",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.5 Reviewing the output tidygraph’s graph object",
    "text": "4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#changing-the-active-object",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#changing-the-active-object",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "4.6 Changing the active object",
    "text": "4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example:\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#plotting-a-basic-network-graph",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#plotting-a-basic-network-graph",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.1 Plotting a basic network graph",
    "text": "5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#changing-the-default-network-graph-theme",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#changing-the-default-network-graph-theme",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.2 Changing the default network graph theme",
    "text": "5.2 Changing the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#changing-the-coloring-of-the-plot",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#changing-the-coloring-of-the-plot",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3 Changing the coloring of the plot",
    "text": "5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-ggraphs-layouts",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-ggraphs-layouts",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4 Working with ggraph’s layouts",
    "text": "5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#fruchterman-and-reingold-layout",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#fruchterman-and-reingold-layout",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5 Fruchterman and Reingold layout",
    "text": "5.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#modifying-network-nodes",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#modifying-network-nodes",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6 Modifying network nodes",
    "text": "5.6 Modifying network nodes\nIn this section, you will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#modifying-edges",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#modifying-edges",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.7 Modifying edges",
    "text": "5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-facet_edges",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-facet_edges",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "6.1 Working with facet_edges()",
    "text": "6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-facet_edges-1",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-facet_edges-1",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "6.2 Working with facet_edges()",
    "text": "6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#a-framed-facet-graph",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#a-framed-facet-graph",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "6.3 A framed facet graph",
    "text": "6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-facet_nodes",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-facet_nodes",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "6.4 Working with facet_nodes()",
    "text": "6.4 Working with facet_nodes()\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#computing-centrality-indices",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#computing-centrality-indices",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "7.1 Computing centrality indices",
    "text": "7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThings to learn from code chunk above\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#visualising-network-metrics",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#visualising-network-metrics",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "7.2 Visualising network metrics",
    "text": "7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#visualising-community",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#visualising-community",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "7.3 Visualising Community",
    "text": "7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#data-preparation",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#data-preparation",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.1 Data preparation",
    "text": "8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#plotting-the-first-interactive-network-graph",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#plotting-the-first-interactive-network-graph",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.2 Plotting the first interactive network graph",
    "text": "8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-layout",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-layout",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.3 Working with layout",
    "text": "8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-visual-attributes---nodes",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-visual-attributes---nodes",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.4 Working with visual attributes - Nodes",
    "text": "8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-visual-attributes---edges",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#working-with-visual-attributes---edges",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.5 Working with visual attributes - Edges",
    "text": "8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#interactivity",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#interactivity",
    "title": "8. Modelling, Visualising and Analysing Network Data with R",
    "section": "8.6 Interactivity",
    "text": "8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visOption’s argument."
  }
]