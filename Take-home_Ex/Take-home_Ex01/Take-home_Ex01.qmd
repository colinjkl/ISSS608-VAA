---
title: "Take-home_Ex01"
date: "January 18, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# "Every School a Good School" Myth or Fact?

[Let's find out.]{.underline}

# 1. Overview

## 1.1 Setting the Scene

OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families.

## 1.2 The Task

The 2022 Programme for International Student Assessment (PISA) data was released on December 5, 2022. PISA global education survey every three years to assess the education systems worldwide through testing 15 year old students in the subjects of mathematics, reading, and science.

In this take-home exercise, you are required to use appropriate **Exploratory Data Analysis (EDA)** methods and **ggplot2** functions to reveal:

-   the distribution of Singapore students’ performance in mathematics, reading, and science, and

-   the relationship between these performances with schools, gender and socioeconomic status of the students.

Limit your submission to not more than **five** EDA visualisation.

# 2. Setting up

## 2.1 Load R packages

We begin by loading the required R packages using the `pacman::p_load()` function from the `pacman` package.

```{r}
pacman::p_load(tidyverse, haven, ggplot2, gridExtra, ggpubr)
```

## 2.2 Load Data

The data we are using can be found from the [PISA 2022 Database](https://www.oecd.org/pisa/data/2022database/). The database contains full set of responses from individual students, principals, and parents. In this task, we will only be looking at the students questionaire data file. In particular, we are only interested in the data of students from Singapore.

In the following code chunk, the data set is first loaded into the environment, and filtered to only rows which country code is "SGP" before saving the data as a RData file for further use.

```{r}
#| eval: false
stu_qqq <- read_sas("data/cy08msp_stu_qqq.sas7bdat")
stu_qqq_SG <- stu_qqq %>% filter(CNT == "SGP")
write_rds(stu_qqq_SG, "data/stu_qqq_SG.rds")
```

```{r}
stu_qqq_SG <- read_rds("data/stu_qqq_SG.rds")
```

# 3. Data Wrangling

## 3.1 Check for duplicates

The code below uses the duplicated function to return a list of boolean values where TRUE indicates a duplicated entry. By summing the list, should there be any TRUE values, the result would be greater than 1. In this case, the sum is 0 which means there are no duplicated values.

```{r}
sum(duplicated(stu_qqq_SG$CNTSTUID))
```

## 3.2 School and Gender

To begin the analysis, we will be creating a new dataframe to store aggregated information that we require.

The code below first creates a new dataframe with the student's ID as the row index. Following that, we add in the respective school ID and gender for each student using the select function. As gender is represented by 1 for Male and 2 for Female, we can re-map these values using the map() and if_else() function.

```{r}
df <- data.frame(stu_id = stu_qqq_SG$CNTSTUID)
```

```{r}
df$sch_id <- stu_qqq_SG$CNTSCHID
df$gender <- stu_qqq_SG$ST004D01T %>% factor(levels = c(1,2), labels = c("Male","Female"))
```

## 3.3 Finding students' grades

For students grades, we will be looking at Plausible values provided in the data set. For each subject (Math, Reading, Science), there are 10 Plausible values given. These values are sampled from the likely distribution of the student's grade. For visualization purposes, we will take the average of the Plausible values as a representative of that subject's grade.

The code below first creates a new dataframe with the student's ID as the row index.

Then, it uses the select function to filter the columns in stu_qqq_SG containing the 10 PVs for each subject, before applying the rowMeans() function to get the average PV and assigning it as a new column in the newly created dataframe.

```{r}
df$math_grades <- select(stu_qqq_SG, contains("PV")&contains("MATH")) %>% rowMeans() %>% as.numeric()
df$read_grades <- select(stu_qqq_SG, contains("PV")&contains("READ")) %>% rowMeans() %>% as.numeric()
df$scie_grades <- select(stu_qqq_SG, contains("PV")&contains("SCIE")) %>% rowMeans() %>% as.numeric()
df$combined_grades <- df$math_grades + df$read_grades + df$scie_grades
```

## 3.4 Common needs

Domestic helpers, one's own room, personal mobile phone are some of the things that most students in Singapore enjoy nowadays. Although not essential for survival, we do believe that these factors contribute substantially to a conducive environment for studying.

The data set contains a set of boolean responses indicating if student have or not have a common need. Treating True values as 1 and False as 0, we can sum up the set of responses to obtain a total score. A higher total score would mean that more common needs are fulfilled for that student, while a low total score suggests otherwise. A large assumption here is that the common needs are equally important, and therefore able to be summed up.

```{r}
df$common_needs <- select(stu_qqq_SG, contains("ST250Q")) %>% mutate_all(~replace(., is.na(.), 0)) %>% mutate(across(contains("ST250Q"), function(x) (x-2)*-1)) %>% rowSums() %>% factor()
```

# 4. EDA

## 4.1 Gender vs Grades?

```{r}
g1 <- ggplot(df, aes(x=math_grades, fill=gender)) + geom_density(alpha=.3)
g2 <- ggplot(df, aes(x=read_grades, fill=gender)) + geom_density(alpha=.3)
g3 <- ggplot(df, aes(x=scie_grades, fill=gender)) + geom_density(alpha=.3)
ggarrange(g1, g2, g3, nrow=3, ncol=1, common.legend = TRUE, legend = "bottom")

```
## 4.2 Common needs vs Grades

```{r}
ggplot(df, aes(x=common_needs, y=combined_grades)) + geom_boxplot()

```
